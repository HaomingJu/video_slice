// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DMSFrame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DMSFrame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DMSFrameProtocol {

namespace {

const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect_i_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_i_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandMark21_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandMark21_reflection_ = NULL;
const ::google::protobuf::Descriptor* Eye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Eye_reflection_ = NULL;
const ::google::protobuf::Descriptor* Eyes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Eyes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlgoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlgoResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PolicyParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolicyParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FaceRecogResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FaceRecogResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CANInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CANInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DMSFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DMSFrame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WarnState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FaceDir_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DMSFrame_2eproto() {
  protobuf_AddDesc_DMSFrame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DMSFrame.proto");
  GOOGLE_CHECK(file != NULL);
  Rect_descriptor_ = file->message_type(0);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, bottom_),
  };
  Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect));
  Rect_i_descriptor_ = file->message_type(1);
  static const int Rect_i_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect_i, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect_i, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect_i, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect_i, bottom_),
  };
  Rect_i_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect_i_descriptor_,
      Rect_i::default_instance_,
      Rect_i_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect_i, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect_i, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect_i));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Face_descriptor_ = file->message_type(3);
  static const int Face_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, score_),
  };
  Face_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Face_descriptor_,
      Face::default_instance_,
      Face_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Face));
  LandMark21_descriptor_ = file->message_type(4);
  static const int LandMark21_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark21, ldmk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark21, score_),
  };
  LandMark21_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandMark21_descriptor_,
      LandMark21::default_instance_,
      LandMark21_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark21, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandMark21, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandMark21));
  Eye_descriptor_ = file->message_type(5);
  static const int Eye_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eye, roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eye, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eye, open_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eye, close_score_),
  };
  Eye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Eye_descriptor_,
      Eye::default_instance_,
      Eye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Eye));
  Eyes_descriptor_ = file->message_type(6);
  static const int Eyes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eyes, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eyes, right_),
  };
  Eyes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Eyes_descriptor_,
      Eyes::default_instance_,
      Eyes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eyes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eyes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Eyes));
  AlgoResult_descriptor_ = file->message_type(7);
  static const int AlgoResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, face_original_rois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, face_filtered_rois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, landmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, eyes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, face_detect_roi_),
  };
  AlgoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlgoResult_descriptor_,
      AlgoResult::default_instance_,
      AlgoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlgoResult));
  PolicyParams_descriptor_ = file->message_type(8);
  static const int PolicyParams_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, r_eye_gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, l_eye_gradient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, eye_gradient_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_r_eye_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_l_eye_close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_eyes_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_eyes_dist_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_l_eye_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_r_eye_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_nose_leye_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_nose_reye_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_nose_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_nose_rl_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_nose_rl_ratio_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, archor_nose_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, devi_nose_dist_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, devi_nose_dist_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, devi_nose_dist_x_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, vari_nose_posi_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, vari_nose_posi_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, vari_nose_posi_x_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, vari_nose_posi_y_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, devi_nose_dist_y_thld_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_rn_rl_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, avr_ln_rl_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, cur_rn_rl_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, cur_ln_rl_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, cur_nose_rl_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, cur_nose_rl_ratio_side_thld_),
  };
  PolicyParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolicyParams_descriptor_,
      PolicyParams::default_instance_,
      PolicyParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolicyParams));
  MonitorResult_descriptor_ = file->message_type(9);
  static const int MonitorResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorResult, warn_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorResult, dur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorResult, policy_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorResult, face_dir_),
  };
  MonitorResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonitorResult_descriptor_,
      MonitorResult::default_instance_,
      MonitorResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonitorResult));
  FaceRecogResult_descriptor_ = file->message_type(10);
  static const int FaceRecogResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, persion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, persion_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, persion_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, persion_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, persion_detect_roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, persion_result_roi_),
  };
  FaceRecogResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FaceRecogResult_descriptor_,
      FaceRecogResult::default_instance_,
      FaceRecogResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceRecogResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FaceRecogResult));
  CANInfo_descriptor_ = file->message_type(11);
  static const int CANInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, gears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, timestamp_),
  };
  CANInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CANInfo_descriptor_,
      CANInfo::default_instance_,
      CANInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CANInfo));
  ImageInfo_descriptor_ = file->message_type(12);
  static const int ImageInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, luma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, img_id_),
  };
  ImageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageInfo_descriptor_,
      ImageInfo::default_instance_,
      ImageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageInfo));
  DMSFrame_descriptor_ = file->message_type(13);
  static const int DMSFrame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, algo_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, monitor_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, can_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, seek_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, facerecog_result_),
  };
  DMSFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DMSFrame_descriptor_,
      DMSFrame::default_instance_,
      DMSFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DMSFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DMSFrame));
  WarnState_descriptor_ = file->enum_type(0);
  FaceDir_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DMSFrame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect_i_descriptor_, &Rect_i::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Face_descriptor_, &Face::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandMark21_descriptor_, &LandMark21::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Eye_descriptor_, &Eye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Eyes_descriptor_, &Eyes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlgoResult_descriptor_, &AlgoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolicyParams_descriptor_, &PolicyParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonitorResult_descriptor_, &MonitorResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaceRecogResult_descriptor_, &FaceRecogResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CANInfo_descriptor_, &CANInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageInfo_descriptor_, &ImageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DMSFrame_descriptor_, &DMSFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DMSFrame_2eproto() {
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete Rect_i::default_instance_;
  delete Rect_i_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Face::default_instance_;
  delete Face_reflection_;
  delete LandMark21::default_instance_;
  delete LandMark21_reflection_;
  delete Eye::default_instance_;
  delete Eye_reflection_;
  delete Eyes::default_instance_;
  delete Eyes_reflection_;
  delete AlgoResult::default_instance_;
  delete AlgoResult_reflection_;
  delete PolicyParams::default_instance_;
  delete PolicyParams_reflection_;
  delete MonitorResult::default_instance_;
  delete MonitorResult_reflection_;
  delete FaceRecogResult::default_instance_;
  delete FaceRecogResult_reflection_;
  delete CANInfo::default_instance_;
  delete CANInfo_reflection_;
  delete ImageInfo::default_instance_;
  delete ImageInfo_reflection_;
  delete DMSFrame::default_instance_;
  delete DMSFrame_reflection_;
}

void protobuf_AddDesc_DMSFrame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DMSFrame.proto\022\020DMSFrameProtocol\"@\n\004Re"
    "ct\022\014\n\004left\030\001 \002(\002\022\r\n\005right\030\002 \002(\002\022\013\n\003top\030\003"
    " \002(\002\022\016\n\006bottom\030\004 \002(\002\"B\n\006Rect_i\022\014\n\004left\030\001"
    " \002(\005\022\r\n\005right\030\002 \002(\005\022\013\n\003top\030\003 \002(\005\022\016\n\006bott"
    "om\030\004 \002(\005\"\035\n\005Point\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\""
    ":\n\004Face\022#\n\003ROI\030\001 \002(\0132\026.DMSFrameProtocol."
    "Rect\022\r\n\005score\030\002 \002(\002\"B\n\nLandMark21\022%\n\004LDM"
    "K\030\001 \003(\0132\027.DMSFrameProtocol.Point\022\r\n\005scor"
    "e\030\002 \003(\002\"c\n\003Eye\022#\n\003ROI\030\001 \002(\0132\026.DMSFramePr"
    "otocol.Rect\022\016\n\006status\030\002 \002(\005\022\022\n\nopen_scor"
    "e\030\003 \002(\002\022\023\n\013close_score\030\004 \002(\002\"Q\n\004Eyes\022#\n\004"
    "left\030\001 \002(\0132\025.DMSFrameProtocol.Eye\022$\n\005rig"
    "ht\030\002 \002(\0132\025.DMSFrameProtocol.Eye\"\373\001\n\nAlgo"
    "Result\0222\n\022face_original_ROIs\030\001 \003(\0132\026.DMS"
    "FrameProtocol.Face\0222\n\022face_filtered_ROIs"
    "\030\002 \001(\0132\026.DMSFrameProtocol.Face\022.\n\010landma"
    "rk\030\003 \001(\0132\034.DMSFrameProtocol.LandMark21\022$"
    "\n\004eyes\030\004 \001(\0132\026.DMSFrameProtocol.Eyes\022/\n\017"
    "face_detect_ROI\030\005 \001(\0132\026.DMSFrameProtocol"
    ".Rect\"\202\007\n\014PolicyParams\022\026\n\016r_eye_gradient"
    "\030\001 \001(\002\022\026\n\016l_eye_gradient\030\002 \001(\002\022\031\n\021eye_gr"
    "adient_thld\030\003 \001(\002\022\027\n\017avr_r_eye_close\030\004 \001"
    "(\002\022\027\n\017avr_l_eye_close\030\005 \001(\002\022\025\n\ravr_eyes_"
    "dist\030\006 \001(\002\022\032\n\022avr_eyes_dist_thld\030\007 \001(\002\0220"
    "\n\017avr_l_eye_point\030\010 \001(\0132\027.DMSFrameProtoc"
    "ol.Point\0220\n\017avr_r_eye_point\030\t \001(\0132\027.DMSF"
    "rameProtocol.Point\022\032\n\022avr_nose_leye_dist"
    "\030\n \001(\002\022\032\n\022avr_nose_reye_dist\030\013 \001(\002\022/\n\016av"
    "r_nose_point\030\014 \001(\0132\027.DMSFrameProtocol.Po"
    "int\022\031\n\021avr_nose_rl_ratio\030\r \001(\002\022\036\n\026avr_no"
    "se_rl_ratio_thld\030\016 \001(\002\0222\n\021archor_nose_po"
    "int\030\017 \001(\0132\027.DMSFrameProtocol.Point\022\030\n\020de"
    "vi_nose_dist_x\030\020 \001(\002\022\030\n\020devi_nose_dist_y"
    "\030\021 \001(\002\022\035\n\025devi_nose_dist_x_thld\030\022 \001(\002\022\030\n"
    "\020vari_nose_posi_x\030\023 \001(\002\022\030\n\020vari_nose_pos"
    "i_y\030\024 \001(\002\022\035\n\025vari_nose_posi_x_thld\030\025 \001(\002"
    "\022\035\n\025vari_nose_posi_y_thld\030\026 \001(\002\022\035\n\025devi_"
    "nose_dist_y_thld\030\027 \001(\002\022\027\n\017avr_rn_rl_rati"
    "o\030\030 \001(\002\022\027\n\017avr_ln_rl_ratio\030\031 \001(\002\022\027\n\017cur_"
    "rn_rl_ratio\030\032 \001(\002\022\027\n\017cur_ln_rl_ratio\030\033 \001"
    "(\002\022\031\n\021cur_nose_rl_ratio\030\034 \001(\002\022#\n\033cur_nos"
    "e_rl_ratio_side_thld\030\035 \001(\002\"\266\001\n\rMonitorRe"
    "sult\022/\n\nwarn_state\030\001 \002(\0162\033.DMSFrameProto"
    "col.WarnState\022\020\n\010dur_time\030\002 \002(\003\0225\n\rpolic"
    "y_params\030\003 \001(\0132\036.DMSFrameProtocol.Policy"
    "Params\022+\n\010face_dir\030\004 \001(\0162\031.DMSFrameProto"
    "col.FaceDir\"\334\001\n\017FaceRecogResult\022\022\n\npersi"
    "on_id\030\001 \001(\005\022\024\n\014persion_name\030\002 \001(\t\022\031\n\021per"
    "sion_timestamp\030\003 \001(\003\022\030\n\020persion_frame_id"
    "\030\004 \001(\005\0224\n\022persion_detect_ROI\030\005 \001(\0132\030.DMS"
    "FrameProtocol.Rect_i\0224\n\022persion_result_R"
    "OI\030\006 \001(\0132\030.DMSFrameProtocol.Rect_i\"\\\n\007CA"
    "NInfo\022\r\n\005Angle\030\001 \001(\005\022\021\n\tDirection\030\002 \001(\005\022"
    "\r\n\005Gears\030\003 \001(\005\022\r\n\005Speed\030\004 \001(\005\022\021\n\ttimesta"
    "mp\030\005 \001(\003\"f\n\tImageInfo\022\014\n\004time\030\001 \002(\003\022\r\n\005w"
    "idth\030\002 \002(\005\022\016\n\006height\030\003 \002(\005\022\016\n\006format\030\004 \002"
    "(\005\022\014\n\004luma\030\005 \002(\005\022\016\n\006img_id\030\006 \001(\005\"\270\002\n\010DMS"
    "Frame\022\020\n\010frame_id\030\001 \001(\005\022*\n\005image\030\002 \001(\0132\033"
    ".DMSFrameProtocol.ImageInfo\0221\n\013algo_resu"
    "lt\030\003 \001(\0132\034.DMSFrameProtocol.AlgoResult\0227"
    "\n\016monitor_result\030\004 \001(\0132\037.DMSFrameProtoco"
    "l.MonitorResult\022+\n\010can_info\030\005 \003(\0132\031.DMSF"
    "rameProtocol.CANInfo\022\030\n\tseek_flag\030\006 \001(\010:"
    "\005false\022;\n\020facerecog_result\030\007 \001(\0132!.DMSFr"
    "ameProtocol.FaceRecogResult*\205\001\n\tWarnStat"
    "e\022\010\n\004NONE\020\000\022\014\n\010W_NOFACE\020\001\022\014\n\010E_NOFACE\020\002\022"
    "\016\n\nW_DISTRACT\020\003\022\016\n\nE_DISTRACT\020\004\022\r\n\tW_FAT"
    "IGUE\020\005\022\r\n\tE_FATIGUE\020\006\022\n\n\006DANGER\020\007\022\010\n\004SIZ"
    "E\020\010*;\n\007FaceDir\022\t\n\005FRONT\020\000\022\010\n\004LEFT\020\001\022\t\n\005R"
    "IGHT\020\002\022\006\n\002UP\020\003\022\010\n\004DOWN\020\004", 2784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DMSFrame.proto", &protobuf_RegisterTypes);
  Rect::default_instance_ = new Rect();
  Rect_i::default_instance_ = new Rect_i();
  Point::default_instance_ = new Point();
  Face::default_instance_ = new Face();
  LandMark21::default_instance_ = new LandMark21();
  Eye::default_instance_ = new Eye();
  Eyes::default_instance_ = new Eyes();
  AlgoResult::default_instance_ = new AlgoResult();
  PolicyParams::default_instance_ = new PolicyParams();
  MonitorResult::default_instance_ = new MonitorResult();
  FaceRecogResult::default_instance_ = new FaceRecogResult();
  CANInfo::default_instance_ = new CANInfo();
  ImageInfo::default_instance_ = new ImageInfo();
  DMSFrame::default_instance_ = new DMSFrame();
  Rect::default_instance_->InitAsDefaultInstance();
  Rect_i::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Face::default_instance_->InitAsDefaultInstance();
  LandMark21::default_instance_->InitAsDefaultInstance();
  Eye::default_instance_->InitAsDefaultInstance();
  Eyes::default_instance_->InitAsDefaultInstance();
  AlgoResult::default_instance_->InitAsDefaultInstance();
  PolicyParams::default_instance_->InitAsDefaultInstance();
  MonitorResult::default_instance_->InitAsDefaultInstance();
  FaceRecogResult::default_instance_->InitAsDefaultInstance();
  CANInfo::default_instance_->InitAsDefaultInstance();
  ImageInfo::default_instance_->InitAsDefaultInstance();
  DMSFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DMSFrame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DMSFrame_2eproto {
  StaticDescriptorInitializer_DMSFrame_2eproto() {
    protobuf_AddDesc_DMSFrame_2eproto();
  }
} static_descriptor_initializer_DMSFrame_2eproto_;
const ::google::protobuf::EnumDescriptor* WarnState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarnState_descriptor_;
}
bool WarnState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FaceDir_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceDir_descriptor_;
}
bool FaceDir_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Rect::kLeftFieldNumber;
const int Rect::kRightFieldNumber;
const int Rect::kTopFieldNumber;
const int Rect::kBottomFieldNumber;
#endif  // !_MSC_VER

Rect::Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.Rect)
}

void Rect::InitAsDefaultInstance() {
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New() const {
  return new Rect;
}

void Rect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_, bottom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right;
        break;
      }

      // required float right = 2;
      case 2: {
        if (tag == 21) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_top;
        break;
      }

      // required float top = 3;
      case 3: {
        if (tag == 29) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bottom;
        break;
      }

      // required float bottom = 4;
      case 4: {
        if (tag == 37) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.Rect)
  // required float left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // required float right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right(), output);
  }

  // required float top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->top(), output);
  }

  // required float bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.Rect)
}

::google::protobuf::uint8* Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.Rect)
  // required float left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // required float right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right(), target);
  }

  // required float top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->top(), target);
  }

  // required float bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.Rect)
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float left = 1;
    if (has_left()) {
      total_size += 1 + 4;
    }

    // required float right = 2;
    if (has_right()) {
      total_size += 1 + 4;
    }

    // required float top = 3;
    if (has_top()) {
      total_size += 1 + 4;
    }

    // required float bottom = 4;
    if (has_bottom()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rect::Swap(Rect* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rect_i::kLeftFieldNumber;
const int Rect_i::kRightFieldNumber;
const int Rect_i::kTopFieldNumber;
const int Rect_i::kBottomFieldNumber;
#endif  // !_MSC_VER

Rect_i::Rect_i()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.Rect_i)
}

void Rect_i::InitAsDefaultInstance() {
}

Rect_i::Rect_i(const Rect_i& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.Rect_i)
}

void Rect_i::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect_i::~Rect_i() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.Rect_i)
  SharedDtor();
}

void Rect_i::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect_i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect_i::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_i_descriptor_;
}

const Rect_i& Rect_i::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

Rect_i* Rect_i::default_instance_ = NULL;

Rect_i* Rect_i::New() const {
  return new Rect_i;
}

void Rect_i::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rect_i*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_, bottom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect_i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.Rect_i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // required int32 right = 2;
      case 2: {
        if (tag == 16) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }

      // required int32 top = 3;
      case 3: {
        if (tag == 24) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // required int32 bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.Rect_i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.Rect_i)
  return false;
#undef DO_
}

void Rect_i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.Rect_i)
  // required int32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // required int32 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(), output);
  }

  // required int32 top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->top(), output);
  }

  // required int32 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.Rect_i)
}

::google::protobuf::uint8* Rect_i::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.Rect_i)
  // required int32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // required int32 right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->right(), target);
  }

  // required int32 top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->top(), target);
  }

  // required int32 bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.Rect_i)
  return target;
}

int Rect_i::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // required int32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // required int32 top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // required int32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect_i::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect_i* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect_i*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect_i::MergeFrom(const Rect_i& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect_i::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect_i::CopyFrom(const Rect_i& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect_i::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rect_i::Swap(Rect_i* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect_i::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_i_descriptor_;
  metadata.reflection = Rect_i_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Face::kROIFieldNumber;
const int Face::kScoreFieldNumber;
#endif  // !_MSC_VER

Face::Face()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.Face)
}

void Face::InitAsDefaultInstance() {
  roi_ = const_cast< ::DMSFrameProtocol::Rect*>(&::DMSFrameProtocol::Rect::default_instance());
}

Face::Face(const Face& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.Face)
}

void Face::SharedCtor() {
  _cached_size_ = 0;
  roi_ = NULL;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (this != default_instance_) {
    delete roi_;
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

Face* Face::default_instance_ = NULL;

Face* Face::New() const {
  return new Face;
}

void Face::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roi()) {
      if (roi_ != NULL) roi_->::DMSFrameProtocol::Rect::Clear();
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSFrameProtocol.Rect ROI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // required float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.Face)
  // required .DMSFrameProtocol.Rect ROI = 1;
  if (has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roi(), output);
  }

  // required float score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.Face)
}

::google::protobuf::uint8* Face::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.Face)
  // required .DMSFrameProtocol.Rect ROI = 1;
  if (has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roi(), target);
  }

  // required float score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.Face)
  return target;
}

int Face::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSFrameProtocol.Rect ROI = 1;
    if (has_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi());
    }

    // required float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Face* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Face*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roi()) {
      mutable_roi()->::DMSFrameProtocol::Rect::MergeFrom(from.roi());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_roi()) {
    if (!this->roi().IsInitialized()) return false;
  }
  return true;
}

void Face::Swap(Face* other) {
  if (other != this) {
    std::swap(roi_, other->roi_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandMark21::kLDMKFieldNumber;
const int LandMark21::kScoreFieldNumber;
#endif  // !_MSC_VER

LandMark21::LandMark21()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.LandMark21)
}

void LandMark21::InitAsDefaultInstance() {
}

LandMark21::LandMark21(const LandMark21& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.LandMark21)
}

void LandMark21::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandMark21::~LandMark21() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.LandMark21)
  SharedDtor();
}

void LandMark21::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandMark21::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandMark21::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandMark21_descriptor_;
}

const LandMark21& LandMark21::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

LandMark21* LandMark21::default_instance_ = NULL;

LandMark21* LandMark21::New() const {
  return new LandMark21;
}

void LandMark21::Clear() {
  ldmk_.Clear();
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandMark21::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.LandMark21)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DMSFrameProtocol.Point LDMK = 1;
      case 1: {
        if (tag == 10) {
         parse_LDMK:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ldmk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_LDMK;
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // repeated float score = 2;
      case 2: {
        if (tag == 21) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_score())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.LandMark21)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.LandMark21)
  return false;
#undef DO_
}

void LandMark21::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.LandMark21)
  // repeated .DMSFrameProtocol.Point LDMK = 1;
  for (int i = 0; i < this->ldmk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ldmk(i), output);
  }

  // repeated float score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.LandMark21)
}

::google::protobuf::uint8* LandMark21::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.LandMark21)
  // repeated .DMSFrameProtocol.Point LDMK = 1;
  for (int i = 0; i < this->ldmk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ldmk(i), target);
  }

  // repeated float score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.LandMark21)
  return target;
}

int LandMark21::ByteSize() const {
  int total_size = 0;

  // repeated .DMSFrameProtocol.Point LDMK = 1;
  total_size += 1 * this->ldmk_size();
  for (int i = 0; i < this->ldmk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ldmk(i));
  }

  // repeated float score = 2;
  {
    int data_size = 0;
    data_size = 4 * this->score_size();
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandMark21::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandMark21* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandMark21*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandMark21::MergeFrom(const LandMark21& from) {
  GOOGLE_CHECK_NE(&from, this);
  ldmk_.MergeFrom(from.ldmk_);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandMark21::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandMark21::CopyFrom(const LandMark21& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandMark21::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ldmk())) return false;
  return true;
}

void LandMark21::Swap(LandMark21* other) {
  if (other != this) {
    ldmk_.Swap(&other->ldmk_);
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandMark21::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandMark21_descriptor_;
  metadata.reflection = LandMark21_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Eye::kROIFieldNumber;
const int Eye::kStatusFieldNumber;
const int Eye::kOpenScoreFieldNumber;
const int Eye::kCloseScoreFieldNumber;
#endif  // !_MSC_VER

Eye::Eye()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.Eye)
}

void Eye::InitAsDefaultInstance() {
  roi_ = const_cast< ::DMSFrameProtocol::Rect*>(&::DMSFrameProtocol::Rect::default_instance());
}

Eye::Eye(const Eye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.Eye)
}

void Eye::SharedCtor() {
  _cached_size_ = 0;
  roi_ = NULL;
  status_ = 0;
  open_score_ = 0;
  close_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Eye::~Eye() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.Eye)
  SharedDtor();
}

void Eye::SharedDtor() {
  if (this != default_instance_) {
    delete roi_;
  }
}

void Eye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Eye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Eye_descriptor_;
}

const Eye& Eye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

Eye* Eye::default_instance_ = NULL;

Eye* Eye::New() const {
  return new Eye;
}

void Eye::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Eye*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(status_, close_score_);
    if (has_roi()) {
      if (roi_ != NULL) roi_->::DMSFrameProtocol::Rect::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Eye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.Eye)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSFrameProtocol.Rect ROI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_open_score;
        break;
      }

      // required float open_score = 3;
      case 3: {
        if (tag == 29) {
         parse_open_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &open_score_)));
          set_has_open_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_close_score;
        break;
      }

      // required float close_score = 4;
      case 4: {
        if (tag == 37) {
         parse_close_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &close_score_)));
          set_has_close_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.Eye)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.Eye)
  return false;
#undef DO_
}

void Eye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.Eye)
  // required .DMSFrameProtocol.Rect ROI = 1;
  if (has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roi(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required float open_score = 3;
  if (has_open_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->open_score(), output);
  }

  // required float close_score = 4;
  if (has_close_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->close_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.Eye)
}

::google::protobuf::uint8* Eye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.Eye)
  // required .DMSFrameProtocol.Rect ROI = 1;
  if (has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roi(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // required float open_score = 3;
  if (has_open_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->open_score(), target);
  }

  // required float close_score = 4;
  if (has_close_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->close_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.Eye)
  return target;
}

int Eye::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSFrameProtocol.Rect ROI = 1;
    if (has_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required float open_score = 3;
    if (has_open_score()) {
      total_size += 1 + 4;
    }

    // required float close_score = 4;
    if (has_close_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Eye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Eye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Eye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Eye::MergeFrom(const Eye& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roi()) {
      mutable_roi()->::DMSFrameProtocol::Rect::MergeFrom(from.roi());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_open_score()) {
      set_open_score(from.open_score());
    }
    if (from.has_close_score()) {
      set_close_score(from.close_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Eye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eye::CopyFrom(const Eye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eye::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_roi()) {
    if (!this->roi().IsInitialized()) return false;
  }
  return true;
}

void Eye::Swap(Eye* other) {
  if (other != this) {
    std::swap(roi_, other->roi_);
    std::swap(status_, other->status_);
    std::swap(open_score_, other->open_score_);
    std::swap(close_score_, other->close_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Eye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Eye_descriptor_;
  metadata.reflection = Eye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Eyes::kLeftFieldNumber;
const int Eyes::kRightFieldNumber;
#endif  // !_MSC_VER

Eyes::Eyes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.Eyes)
}

void Eyes::InitAsDefaultInstance() {
  left_ = const_cast< ::DMSFrameProtocol::Eye*>(&::DMSFrameProtocol::Eye::default_instance());
  right_ = const_cast< ::DMSFrameProtocol::Eye*>(&::DMSFrameProtocol::Eye::default_instance());
}

Eyes::Eyes(const Eyes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.Eyes)
}

void Eyes::SharedCtor() {
  _cached_size_ = 0;
  left_ = NULL;
  right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Eyes::~Eyes() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.Eyes)
  SharedDtor();
}

void Eyes::SharedDtor() {
  if (this != default_instance_) {
    delete left_;
    delete right_;
  }
}

void Eyes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Eyes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Eyes_descriptor_;
}

const Eyes& Eyes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

Eyes* Eyes::default_instance_ = NULL;

Eyes* Eyes::New() const {
  return new Eyes;
}

void Eyes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_left()) {
      if (left_ != NULL) left_->::DMSFrameProtocol::Eye::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::DMSFrameProtocol::Eye::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Eyes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.Eyes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSFrameProtocol.Eye left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // required .DMSFrameProtocol.Eye right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.Eyes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.Eyes)
  return false;
#undef DO_
}

void Eyes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.Eyes)
  // required .DMSFrameProtocol.Eye left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->left(), output);
  }

  // required .DMSFrameProtocol.Eye right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.Eyes)
}

::google::protobuf::uint8* Eyes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.Eyes)
  // required .DMSFrameProtocol.Eye left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->left(), target);
  }

  // required .DMSFrameProtocol.Eye right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.Eyes)
  return target;
}

int Eyes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSFrameProtocol.Eye left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // required .DMSFrameProtocol.Eye right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Eyes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Eyes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Eyes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Eyes::MergeFrom(const Eyes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      mutable_left()->::DMSFrameProtocol::Eye::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::DMSFrameProtocol::Eye::MergeFrom(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Eyes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eyes::CopyFrom(const Eyes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eyes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_left()) {
    if (!this->left().IsInitialized()) return false;
  }
  if (has_right()) {
    if (!this->right().IsInitialized()) return false;
  }
  return true;
}

void Eyes::Swap(Eyes* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Eyes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Eyes_descriptor_;
  metadata.reflection = Eyes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlgoResult::kFaceOriginalROIsFieldNumber;
const int AlgoResult::kFaceFilteredROIsFieldNumber;
const int AlgoResult::kLandmarkFieldNumber;
const int AlgoResult::kEyesFieldNumber;
const int AlgoResult::kFaceDetectROIFieldNumber;
#endif  // !_MSC_VER

AlgoResult::AlgoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.AlgoResult)
}

void AlgoResult::InitAsDefaultInstance() {
  face_filtered_rois_ = const_cast< ::DMSFrameProtocol::Face*>(&::DMSFrameProtocol::Face::default_instance());
  landmark_ = const_cast< ::DMSFrameProtocol::LandMark21*>(&::DMSFrameProtocol::LandMark21::default_instance());
  eyes_ = const_cast< ::DMSFrameProtocol::Eyes*>(&::DMSFrameProtocol::Eyes::default_instance());
  face_detect_roi_ = const_cast< ::DMSFrameProtocol::Rect*>(&::DMSFrameProtocol::Rect::default_instance());
}

AlgoResult::AlgoResult(const AlgoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.AlgoResult)
}

void AlgoResult::SharedCtor() {
  _cached_size_ = 0;
  face_filtered_rois_ = NULL;
  landmark_ = NULL;
  eyes_ = NULL;
  face_detect_roi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlgoResult::~AlgoResult() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.AlgoResult)
  SharedDtor();
}

void AlgoResult::SharedDtor() {
  if (this != default_instance_) {
    delete face_filtered_rois_;
    delete landmark_;
    delete eyes_;
    delete face_detect_roi_;
  }
}

void AlgoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlgoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgoResult_descriptor_;
}

const AlgoResult& AlgoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

AlgoResult* AlgoResult::default_instance_ = NULL;

AlgoResult* AlgoResult::New() const {
  return new AlgoResult;
}

void AlgoResult::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    if (has_face_filtered_rois()) {
      if (face_filtered_rois_ != NULL) face_filtered_rois_->::DMSFrameProtocol::Face::Clear();
    }
    if (has_landmark()) {
      if (landmark_ != NULL) landmark_->::DMSFrameProtocol::LandMark21::Clear();
    }
    if (has_eyes()) {
      if (eyes_ != NULL) eyes_->::DMSFrameProtocol::Eyes::Clear();
    }
    if (has_face_detect_roi()) {
      if (face_detect_roi_ != NULL) face_detect_roi_->::DMSFrameProtocol::Rect::Clear();
    }
  }
  face_original_rois_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlgoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.AlgoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DMSFrameProtocol.Face face_original_ROIs = 1;
      case 1: {
        if (tag == 10) {
         parse_face_original_ROIs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face_original_rois()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_face_original_ROIs;
        if (input->ExpectTag(18)) goto parse_face_filtered_ROIs;
        break;
      }

      // optional .DMSFrameProtocol.Face face_filtered_ROIs = 2;
      case 2: {
        if (tag == 18) {
         parse_face_filtered_ROIs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_filtered_rois()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_landmark;
        break;
      }

      // optional .DMSFrameProtocol.LandMark21 landmark = 3;
      case 3: {
        if (tag == 26) {
         parse_landmark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_eyes;
        break;
      }

      // optional .DMSFrameProtocol.Eyes eyes = 4;
      case 4: {
        if (tag == 34) {
         parse_eyes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eyes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_face_detect_ROI;
        break;
      }

      // optional .DMSFrameProtocol.Rect face_detect_ROI = 5;
      case 5: {
        if (tag == 42) {
         parse_face_detect_ROI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_face_detect_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.AlgoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.AlgoResult)
  return false;
#undef DO_
}

void AlgoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.AlgoResult)
  // repeated .DMSFrameProtocol.Face face_original_ROIs = 1;
  for (int i = 0; i < this->face_original_rois_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->face_original_rois(i), output);
  }

  // optional .DMSFrameProtocol.Face face_filtered_ROIs = 2;
  if (has_face_filtered_rois()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->face_filtered_rois(), output);
  }

  // optional .DMSFrameProtocol.LandMark21 landmark = 3;
  if (has_landmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->landmark(), output);
  }

  // optional .DMSFrameProtocol.Eyes eyes = 4;
  if (has_eyes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->eyes(), output);
  }

  // optional .DMSFrameProtocol.Rect face_detect_ROI = 5;
  if (has_face_detect_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->face_detect_roi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.AlgoResult)
}

::google::protobuf::uint8* AlgoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.AlgoResult)
  // repeated .DMSFrameProtocol.Face face_original_ROIs = 1;
  for (int i = 0; i < this->face_original_rois_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->face_original_rois(i), target);
  }

  // optional .DMSFrameProtocol.Face face_filtered_ROIs = 2;
  if (has_face_filtered_rois()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->face_filtered_rois(), target);
  }

  // optional .DMSFrameProtocol.LandMark21 landmark = 3;
  if (has_landmark()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->landmark(), target);
  }

  // optional .DMSFrameProtocol.Eyes eyes = 4;
  if (has_eyes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->eyes(), target);
  }

  // optional .DMSFrameProtocol.Rect face_detect_ROI = 5;
  if (has_face_detect_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->face_detect_roi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.AlgoResult)
  return target;
}

int AlgoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .DMSFrameProtocol.Face face_filtered_ROIs = 2;
    if (has_face_filtered_rois()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->face_filtered_rois());
    }

    // optional .DMSFrameProtocol.LandMark21 landmark = 3;
    if (has_landmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark());
    }

    // optional .DMSFrameProtocol.Eyes eyes = 4;
    if (has_eyes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eyes());
    }

    // optional .DMSFrameProtocol.Rect face_detect_ROI = 5;
    if (has_face_detect_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->face_detect_roi());
    }

  }
  // repeated .DMSFrameProtocol.Face face_original_ROIs = 1;
  total_size += 1 * this->face_original_rois_size();
  for (int i = 0; i < this->face_original_rois_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face_original_rois(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlgoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlgoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlgoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlgoResult::MergeFrom(const AlgoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  face_original_rois_.MergeFrom(from.face_original_rois_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_face_filtered_rois()) {
      mutable_face_filtered_rois()->::DMSFrameProtocol::Face::MergeFrom(from.face_filtered_rois());
    }
    if (from.has_landmark()) {
      mutable_landmark()->::DMSFrameProtocol::LandMark21::MergeFrom(from.landmark());
    }
    if (from.has_eyes()) {
      mutable_eyes()->::DMSFrameProtocol::Eyes::MergeFrom(from.eyes());
    }
    if (from.has_face_detect_roi()) {
      mutable_face_detect_roi()->::DMSFrameProtocol::Rect::MergeFrom(from.face_detect_roi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlgoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgoResult::CopyFrom(const AlgoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgoResult::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->face_original_rois())) return false;
  if (has_face_filtered_rois()) {
    if (!this->face_filtered_rois().IsInitialized()) return false;
  }
  if (has_landmark()) {
    if (!this->landmark().IsInitialized()) return false;
  }
  if (has_eyes()) {
    if (!this->eyes().IsInitialized()) return false;
  }
  if (has_face_detect_roi()) {
    if (!this->face_detect_roi().IsInitialized()) return false;
  }
  return true;
}

void AlgoResult::Swap(AlgoResult* other) {
  if (other != this) {
    face_original_rois_.Swap(&other->face_original_rois_);
    std::swap(face_filtered_rois_, other->face_filtered_rois_);
    std::swap(landmark_, other->landmark_);
    std::swap(eyes_, other->eyes_);
    std::swap(face_detect_roi_, other->face_detect_roi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlgoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlgoResult_descriptor_;
  metadata.reflection = AlgoResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PolicyParams::kREyeGradientFieldNumber;
const int PolicyParams::kLEyeGradientFieldNumber;
const int PolicyParams::kEyeGradientThldFieldNumber;
const int PolicyParams::kAvrREyeCloseFieldNumber;
const int PolicyParams::kAvrLEyeCloseFieldNumber;
const int PolicyParams::kAvrEyesDistFieldNumber;
const int PolicyParams::kAvrEyesDistThldFieldNumber;
const int PolicyParams::kAvrLEyePointFieldNumber;
const int PolicyParams::kAvrREyePointFieldNumber;
const int PolicyParams::kAvrNoseLeyeDistFieldNumber;
const int PolicyParams::kAvrNoseReyeDistFieldNumber;
const int PolicyParams::kAvrNosePointFieldNumber;
const int PolicyParams::kAvrNoseRlRatioFieldNumber;
const int PolicyParams::kAvrNoseRlRatioThldFieldNumber;
const int PolicyParams::kArchorNosePointFieldNumber;
const int PolicyParams::kDeviNoseDistXFieldNumber;
const int PolicyParams::kDeviNoseDistYFieldNumber;
const int PolicyParams::kDeviNoseDistXThldFieldNumber;
const int PolicyParams::kVariNosePosiXFieldNumber;
const int PolicyParams::kVariNosePosiYFieldNumber;
const int PolicyParams::kVariNosePosiXThldFieldNumber;
const int PolicyParams::kVariNosePosiYThldFieldNumber;
const int PolicyParams::kDeviNoseDistYThldFieldNumber;
const int PolicyParams::kAvrRnRlRatioFieldNumber;
const int PolicyParams::kAvrLnRlRatioFieldNumber;
const int PolicyParams::kCurRnRlRatioFieldNumber;
const int PolicyParams::kCurLnRlRatioFieldNumber;
const int PolicyParams::kCurNoseRlRatioFieldNumber;
const int PolicyParams::kCurNoseRlRatioSideThldFieldNumber;
#endif  // !_MSC_VER

PolicyParams::PolicyParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.PolicyParams)
}

void PolicyParams::InitAsDefaultInstance() {
  avr_l_eye_point_ = const_cast< ::DMSFrameProtocol::Point*>(&::DMSFrameProtocol::Point::default_instance());
  avr_r_eye_point_ = const_cast< ::DMSFrameProtocol::Point*>(&::DMSFrameProtocol::Point::default_instance());
  avr_nose_point_ = const_cast< ::DMSFrameProtocol::Point*>(&::DMSFrameProtocol::Point::default_instance());
  archor_nose_point_ = const_cast< ::DMSFrameProtocol::Point*>(&::DMSFrameProtocol::Point::default_instance());
}

PolicyParams::PolicyParams(const PolicyParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.PolicyParams)
}

void PolicyParams::SharedCtor() {
  _cached_size_ = 0;
  r_eye_gradient_ = 0;
  l_eye_gradient_ = 0;
  eye_gradient_thld_ = 0;
  avr_r_eye_close_ = 0;
  avr_l_eye_close_ = 0;
  avr_eyes_dist_ = 0;
  avr_eyes_dist_thld_ = 0;
  avr_l_eye_point_ = NULL;
  avr_r_eye_point_ = NULL;
  avr_nose_leye_dist_ = 0;
  avr_nose_reye_dist_ = 0;
  avr_nose_point_ = NULL;
  avr_nose_rl_ratio_ = 0;
  avr_nose_rl_ratio_thld_ = 0;
  archor_nose_point_ = NULL;
  devi_nose_dist_x_ = 0;
  devi_nose_dist_y_ = 0;
  devi_nose_dist_x_thld_ = 0;
  vari_nose_posi_x_ = 0;
  vari_nose_posi_y_ = 0;
  vari_nose_posi_x_thld_ = 0;
  vari_nose_posi_y_thld_ = 0;
  devi_nose_dist_y_thld_ = 0;
  avr_rn_rl_ratio_ = 0;
  avr_ln_rl_ratio_ = 0;
  cur_rn_rl_ratio_ = 0;
  cur_ln_rl_ratio_ = 0;
  cur_nose_rl_ratio_ = 0;
  cur_nose_rl_ratio_side_thld_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyParams::~PolicyParams() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.PolicyParams)
  SharedDtor();
}

void PolicyParams::SharedDtor() {
  if (this != default_instance_) {
    delete avr_l_eye_point_;
    delete avr_r_eye_point_;
    delete avr_nose_point_;
    delete archor_nose_point_;
  }
}

void PolicyParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolicyParams_descriptor_;
}

const PolicyParams& PolicyParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

PolicyParams* PolicyParams::default_instance_ = NULL;

PolicyParams* PolicyParams::New() const {
  return new PolicyParams;
}

void PolicyParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PolicyParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(r_eye_gradient_, avr_eyes_dist_);
    avr_eyes_dist_thld_ = 0;
    if (has_avr_l_eye_point()) {
      if (avr_l_eye_point_ != NULL) avr_l_eye_point_->::DMSFrameProtocol::Point::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(avr_nose_reye_dist_, avr_nose_rl_ratio_);
    ZR_(avr_nose_rl_ratio_thld_, devi_nose_dist_x_);
    if (has_avr_r_eye_point()) {
      if (avr_r_eye_point_ != NULL) avr_r_eye_point_->::DMSFrameProtocol::Point::Clear();
    }
    avr_nose_leye_dist_ = 0;
    if (has_avr_nose_point()) {
      if (avr_nose_point_ != NULL) avr_nose_point_->::DMSFrameProtocol::Point::Clear();
    }
    if (has_archor_nose_point()) {
      if (archor_nose_point_ != NULL) archor_nose_point_->::DMSFrameProtocol::Point::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(devi_nose_dist_y_, avr_rn_rl_ratio_);
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(avr_ln_rl_ratio_, cur_nose_rl_ratio_side_thld_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolicyParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.PolicyParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float r_eye_gradient = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_eye_gradient_)));
          set_has_r_eye_gradient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_l_eye_gradient;
        break;
      }

      // optional float l_eye_gradient = 2;
      case 2: {
        if (tag == 21) {
         parse_l_eye_gradient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l_eye_gradient_)));
          set_has_l_eye_gradient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_eye_gradient_thld;
        break;
      }

      // optional float eye_gradient_thld = 3;
      case 3: {
        if (tag == 29) {
         parse_eye_gradient_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eye_gradient_thld_)));
          set_has_eye_gradient_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_avr_r_eye_close;
        break;
      }

      // optional float avr_r_eye_close = 4;
      case 4: {
        if (tag == 37) {
         parse_avr_r_eye_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_r_eye_close_)));
          set_has_avr_r_eye_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_avr_l_eye_close;
        break;
      }

      // optional float avr_l_eye_close = 5;
      case 5: {
        if (tag == 45) {
         parse_avr_l_eye_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_l_eye_close_)));
          set_has_avr_l_eye_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_avr_eyes_dist;
        break;
      }

      // optional float avr_eyes_dist = 6;
      case 6: {
        if (tag == 53) {
         parse_avr_eyes_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_eyes_dist_)));
          set_has_avr_eyes_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_avr_eyes_dist_thld;
        break;
      }

      // optional float avr_eyes_dist_thld = 7;
      case 7: {
        if (tag == 61) {
         parse_avr_eyes_dist_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_eyes_dist_thld_)));
          set_has_avr_eyes_dist_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_avr_l_eye_point;
        break;
      }

      // optional .DMSFrameProtocol.Point avr_l_eye_point = 8;
      case 8: {
        if (tag == 66) {
         parse_avr_l_eye_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avr_l_eye_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_avr_r_eye_point;
        break;
      }

      // optional .DMSFrameProtocol.Point avr_r_eye_point = 9;
      case 9: {
        if (tag == 74) {
         parse_avr_r_eye_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avr_r_eye_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_avr_nose_leye_dist;
        break;
      }

      // optional float avr_nose_leye_dist = 10;
      case 10: {
        if (tag == 85) {
         parse_avr_nose_leye_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_nose_leye_dist_)));
          set_has_avr_nose_leye_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_avr_nose_reye_dist;
        break;
      }

      // optional float avr_nose_reye_dist = 11;
      case 11: {
        if (tag == 93) {
         parse_avr_nose_reye_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_nose_reye_dist_)));
          set_has_avr_nose_reye_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_avr_nose_point;
        break;
      }

      // optional .DMSFrameProtocol.Point avr_nose_point = 12;
      case 12: {
        if (tag == 98) {
         parse_avr_nose_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avr_nose_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_avr_nose_rl_ratio;
        break;
      }

      // optional float avr_nose_rl_ratio = 13;
      case 13: {
        if (tag == 109) {
         parse_avr_nose_rl_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_nose_rl_ratio_)));
          set_has_avr_nose_rl_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_avr_nose_rl_ratio_thld;
        break;
      }

      // optional float avr_nose_rl_ratio_thld = 14;
      case 14: {
        if (tag == 117) {
         parse_avr_nose_rl_ratio_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_nose_rl_ratio_thld_)));
          set_has_avr_nose_rl_ratio_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_archor_nose_point;
        break;
      }

      // optional .DMSFrameProtocol.Point archor_nose_point = 15;
      case 15: {
        if (tag == 122) {
         parse_archor_nose_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_archor_nose_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_devi_nose_dist_x;
        break;
      }

      // optional float devi_nose_dist_x = 16;
      case 16: {
        if (tag == 133) {
         parse_devi_nose_dist_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &devi_nose_dist_x_)));
          set_has_devi_nose_dist_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_devi_nose_dist_y;
        break;
      }

      // optional float devi_nose_dist_y = 17;
      case 17: {
        if (tag == 141) {
         parse_devi_nose_dist_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &devi_nose_dist_y_)));
          set_has_devi_nose_dist_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_devi_nose_dist_x_thld;
        break;
      }

      // optional float devi_nose_dist_x_thld = 18;
      case 18: {
        if (tag == 149) {
         parse_devi_nose_dist_x_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &devi_nose_dist_x_thld_)));
          set_has_devi_nose_dist_x_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_vari_nose_posi_x;
        break;
      }

      // optional float vari_nose_posi_x = 19;
      case 19: {
        if (tag == 157) {
         parse_vari_nose_posi_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vari_nose_posi_x_)));
          set_has_vari_nose_posi_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_vari_nose_posi_y;
        break;
      }

      // optional float vari_nose_posi_y = 20;
      case 20: {
        if (tag == 165) {
         parse_vari_nose_posi_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vari_nose_posi_y_)));
          set_has_vari_nose_posi_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_vari_nose_posi_x_thld;
        break;
      }

      // optional float vari_nose_posi_x_thld = 21;
      case 21: {
        if (tag == 173) {
         parse_vari_nose_posi_x_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vari_nose_posi_x_thld_)));
          set_has_vari_nose_posi_x_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_vari_nose_posi_y_thld;
        break;
      }

      // optional float vari_nose_posi_y_thld = 22;
      case 22: {
        if (tag == 181) {
         parse_vari_nose_posi_y_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vari_nose_posi_y_thld_)));
          set_has_vari_nose_posi_y_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_devi_nose_dist_y_thld;
        break;
      }

      // optional float devi_nose_dist_y_thld = 23;
      case 23: {
        if (tag == 189) {
         parse_devi_nose_dist_y_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &devi_nose_dist_y_thld_)));
          set_has_devi_nose_dist_y_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_avr_rn_rl_ratio;
        break;
      }

      // optional float avr_rn_rl_ratio = 24;
      case 24: {
        if (tag == 197) {
         parse_avr_rn_rl_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_rn_rl_ratio_)));
          set_has_avr_rn_rl_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_avr_ln_rl_ratio;
        break;
      }

      // optional float avr_ln_rl_ratio = 25;
      case 25: {
        if (tag == 205) {
         parse_avr_ln_rl_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avr_ln_rl_ratio_)));
          set_has_avr_ln_rl_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_cur_rn_rl_ratio;
        break;
      }

      // optional float cur_rn_rl_ratio = 26;
      case 26: {
        if (tag == 213) {
         parse_cur_rn_rl_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_rn_rl_ratio_)));
          set_has_cur_rn_rl_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_cur_ln_rl_ratio;
        break;
      }

      // optional float cur_ln_rl_ratio = 27;
      case 27: {
        if (tag == 221) {
         parse_cur_ln_rl_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_ln_rl_ratio_)));
          set_has_cur_ln_rl_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_cur_nose_rl_ratio;
        break;
      }

      // optional float cur_nose_rl_ratio = 28;
      case 28: {
        if (tag == 229) {
         parse_cur_nose_rl_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_nose_rl_ratio_)));
          set_has_cur_nose_rl_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_cur_nose_rl_ratio_side_thld;
        break;
      }

      // optional float cur_nose_rl_ratio_side_thld = 29;
      case 29: {
        if (tag == 237) {
         parse_cur_nose_rl_ratio_side_thld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_nose_rl_ratio_side_thld_)));
          set_has_cur_nose_rl_ratio_side_thld();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.PolicyParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.PolicyParams)
  return false;
#undef DO_
}

void PolicyParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.PolicyParams)
  // optional float r_eye_gradient = 1;
  if (has_r_eye_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r_eye_gradient(), output);
  }

  // optional float l_eye_gradient = 2;
  if (has_l_eye_gradient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->l_eye_gradient(), output);
  }

  // optional float eye_gradient_thld = 3;
  if (has_eye_gradient_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->eye_gradient_thld(), output);
  }

  // optional float avr_r_eye_close = 4;
  if (has_avr_r_eye_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->avr_r_eye_close(), output);
  }

  // optional float avr_l_eye_close = 5;
  if (has_avr_l_eye_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->avr_l_eye_close(), output);
  }

  // optional float avr_eyes_dist = 6;
  if (has_avr_eyes_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->avr_eyes_dist(), output);
  }

  // optional float avr_eyes_dist_thld = 7;
  if (has_avr_eyes_dist_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->avr_eyes_dist_thld(), output);
  }

  // optional .DMSFrameProtocol.Point avr_l_eye_point = 8;
  if (has_avr_l_eye_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->avr_l_eye_point(), output);
  }

  // optional .DMSFrameProtocol.Point avr_r_eye_point = 9;
  if (has_avr_r_eye_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->avr_r_eye_point(), output);
  }

  // optional float avr_nose_leye_dist = 10;
  if (has_avr_nose_leye_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->avr_nose_leye_dist(), output);
  }

  // optional float avr_nose_reye_dist = 11;
  if (has_avr_nose_reye_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->avr_nose_reye_dist(), output);
  }

  // optional .DMSFrameProtocol.Point avr_nose_point = 12;
  if (has_avr_nose_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->avr_nose_point(), output);
  }

  // optional float avr_nose_rl_ratio = 13;
  if (has_avr_nose_rl_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->avr_nose_rl_ratio(), output);
  }

  // optional float avr_nose_rl_ratio_thld = 14;
  if (has_avr_nose_rl_ratio_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->avr_nose_rl_ratio_thld(), output);
  }

  // optional .DMSFrameProtocol.Point archor_nose_point = 15;
  if (has_archor_nose_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->archor_nose_point(), output);
  }

  // optional float devi_nose_dist_x = 16;
  if (has_devi_nose_dist_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->devi_nose_dist_x(), output);
  }

  // optional float devi_nose_dist_y = 17;
  if (has_devi_nose_dist_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->devi_nose_dist_y(), output);
  }

  // optional float devi_nose_dist_x_thld = 18;
  if (has_devi_nose_dist_x_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->devi_nose_dist_x_thld(), output);
  }

  // optional float vari_nose_posi_x = 19;
  if (has_vari_nose_posi_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->vari_nose_posi_x(), output);
  }

  // optional float vari_nose_posi_y = 20;
  if (has_vari_nose_posi_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->vari_nose_posi_y(), output);
  }

  // optional float vari_nose_posi_x_thld = 21;
  if (has_vari_nose_posi_x_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->vari_nose_posi_x_thld(), output);
  }

  // optional float vari_nose_posi_y_thld = 22;
  if (has_vari_nose_posi_y_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->vari_nose_posi_y_thld(), output);
  }

  // optional float devi_nose_dist_y_thld = 23;
  if (has_devi_nose_dist_y_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->devi_nose_dist_y_thld(), output);
  }

  // optional float avr_rn_rl_ratio = 24;
  if (has_avr_rn_rl_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->avr_rn_rl_ratio(), output);
  }

  // optional float avr_ln_rl_ratio = 25;
  if (has_avr_ln_rl_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->avr_ln_rl_ratio(), output);
  }

  // optional float cur_rn_rl_ratio = 26;
  if (has_cur_rn_rl_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->cur_rn_rl_ratio(), output);
  }

  // optional float cur_ln_rl_ratio = 27;
  if (has_cur_ln_rl_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->cur_ln_rl_ratio(), output);
  }

  // optional float cur_nose_rl_ratio = 28;
  if (has_cur_nose_rl_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->cur_nose_rl_ratio(), output);
  }

  // optional float cur_nose_rl_ratio_side_thld = 29;
  if (has_cur_nose_rl_ratio_side_thld()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->cur_nose_rl_ratio_side_thld(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.PolicyParams)
}

::google::protobuf::uint8* PolicyParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.PolicyParams)
  // optional float r_eye_gradient = 1;
  if (has_r_eye_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r_eye_gradient(), target);
  }

  // optional float l_eye_gradient = 2;
  if (has_l_eye_gradient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->l_eye_gradient(), target);
  }

  // optional float eye_gradient_thld = 3;
  if (has_eye_gradient_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->eye_gradient_thld(), target);
  }

  // optional float avr_r_eye_close = 4;
  if (has_avr_r_eye_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->avr_r_eye_close(), target);
  }

  // optional float avr_l_eye_close = 5;
  if (has_avr_l_eye_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->avr_l_eye_close(), target);
  }

  // optional float avr_eyes_dist = 6;
  if (has_avr_eyes_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->avr_eyes_dist(), target);
  }

  // optional float avr_eyes_dist_thld = 7;
  if (has_avr_eyes_dist_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->avr_eyes_dist_thld(), target);
  }

  // optional .DMSFrameProtocol.Point avr_l_eye_point = 8;
  if (has_avr_l_eye_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->avr_l_eye_point(), target);
  }

  // optional .DMSFrameProtocol.Point avr_r_eye_point = 9;
  if (has_avr_r_eye_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->avr_r_eye_point(), target);
  }

  // optional float avr_nose_leye_dist = 10;
  if (has_avr_nose_leye_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->avr_nose_leye_dist(), target);
  }

  // optional float avr_nose_reye_dist = 11;
  if (has_avr_nose_reye_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->avr_nose_reye_dist(), target);
  }

  // optional .DMSFrameProtocol.Point avr_nose_point = 12;
  if (has_avr_nose_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->avr_nose_point(), target);
  }

  // optional float avr_nose_rl_ratio = 13;
  if (has_avr_nose_rl_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->avr_nose_rl_ratio(), target);
  }

  // optional float avr_nose_rl_ratio_thld = 14;
  if (has_avr_nose_rl_ratio_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->avr_nose_rl_ratio_thld(), target);
  }

  // optional .DMSFrameProtocol.Point archor_nose_point = 15;
  if (has_archor_nose_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->archor_nose_point(), target);
  }

  // optional float devi_nose_dist_x = 16;
  if (has_devi_nose_dist_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->devi_nose_dist_x(), target);
  }

  // optional float devi_nose_dist_y = 17;
  if (has_devi_nose_dist_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->devi_nose_dist_y(), target);
  }

  // optional float devi_nose_dist_x_thld = 18;
  if (has_devi_nose_dist_x_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->devi_nose_dist_x_thld(), target);
  }

  // optional float vari_nose_posi_x = 19;
  if (has_vari_nose_posi_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->vari_nose_posi_x(), target);
  }

  // optional float vari_nose_posi_y = 20;
  if (has_vari_nose_posi_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->vari_nose_posi_y(), target);
  }

  // optional float vari_nose_posi_x_thld = 21;
  if (has_vari_nose_posi_x_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->vari_nose_posi_x_thld(), target);
  }

  // optional float vari_nose_posi_y_thld = 22;
  if (has_vari_nose_posi_y_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->vari_nose_posi_y_thld(), target);
  }

  // optional float devi_nose_dist_y_thld = 23;
  if (has_devi_nose_dist_y_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->devi_nose_dist_y_thld(), target);
  }

  // optional float avr_rn_rl_ratio = 24;
  if (has_avr_rn_rl_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->avr_rn_rl_ratio(), target);
  }

  // optional float avr_ln_rl_ratio = 25;
  if (has_avr_ln_rl_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->avr_ln_rl_ratio(), target);
  }

  // optional float cur_rn_rl_ratio = 26;
  if (has_cur_rn_rl_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->cur_rn_rl_ratio(), target);
  }

  // optional float cur_ln_rl_ratio = 27;
  if (has_cur_ln_rl_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->cur_ln_rl_ratio(), target);
  }

  // optional float cur_nose_rl_ratio = 28;
  if (has_cur_nose_rl_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->cur_nose_rl_ratio(), target);
  }

  // optional float cur_nose_rl_ratio_side_thld = 29;
  if (has_cur_nose_rl_ratio_side_thld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->cur_nose_rl_ratio_side_thld(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.PolicyParams)
  return target;
}

int PolicyParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float r_eye_gradient = 1;
    if (has_r_eye_gradient()) {
      total_size += 1 + 4;
    }

    // optional float l_eye_gradient = 2;
    if (has_l_eye_gradient()) {
      total_size += 1 + 4;
    }

    // optional float eye_gradient_thld = 3;
    if (has_eye_gradient_thld()) {
      total_size += 1 + 4;
    }

    // optional float avr_r_eye_close = 4;
    if (has_avr_r_eye_close()) {
      total_size += 1 + 4;
    }

    // optional float avr_l_eye_close = 5;
    if (has_avr_l_eye_close()) {
      total_size += 1 + 4;
    }

    // optional float avr_eyes_dist = 6;
    if (has_avr_eyes_dist()) {
      total_size += 1 + 4;
    }

    // optional float avr_eyes_dist_thld = 7;
    if (has_avr_eyes_dist_thld()) {
      total_size += 1 + 4;
    }

    // optional .DMSFrameProtocol.Point avr_l_eye_point = 8;
    if (has_avr_l_eye_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avr_l_eye_point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DMSFrameProtocol.Point avr_r_eye_point = 9;
    if (has_avr_r_eye_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avr_r_eye_point());
    }

    // optional float avr_nose_leye_dist = 10;
    if (has_avr_nose_leye_dist()) {
      total_size += 1 + 4;
    }

    // optional float avr_nose_reye_dist = 11;
    if (has_avr_nose_reye_dist()) {
      total_size += 1 + 4;
    }

    // optional .DMSFrameProtocol.Point avr_nose_point = 12;
    if (has_avr_nose_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avr_nose_point());
    }

    // optional float avr_nose_rl_ratio = 13;
    if (has_avr_nose_rl_ratio()) {
      total_size += 1 + 4;
    }

    // optional float avr_nose_rl_ratio_thld = 14;
    if (has_avr_nose_rl_ratio_thld()) {
      total_size += 1 + 4;
    }

    // optional .DMSFrameProtocol.Point archor_nose_point = 15;
    if (has_archor_nose_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->archor_nose_point());
    }

    // optional float devi_nose_dist_x = 16;
    if (has_devi_nose_dist_x()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float devi_nose_dist_y = 17;
    if (has_devi_nose_dist_y()) {
      total_size += 2 + 4;
    }

    // optional float devi_nose_dist_x_thld = 18;
    if (has_devi_nose_dist_x_thld()) {
      total_size += 2 + 4;
    }

    // optional float vari_nose_posi_x = 19;
    if (has_vari_nose_posi_x()) {
      total_size += 2 + 4;
    }

    // optional float vari_nose_posi_y = 20;
    if (has_vari_nose_posi_y()) {
      total_size += 2 + 4;
    }

    // optional float vari_nose_posi_x_thld = 21;
    if (has_vari_nose_posi_x_thld()) {
      total_size += 2 + 4;
    }

    // optional float vari_nose_posi_y_thld = 22;
    if (has_vari_nose_posi_y_thld()) {
      total_size += 2 + 4;
    }

    // optional float devi_nose_dist_y_thld = 23;
    if (has_devi_nose_dist_y_thld()) {
      total_size += 2 + 4;
    }

    // optional float avr_rn_rl_ratio = 24;
    if (has_avr_rn_rl_ratio()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float avr_ln_rl_ratio = 25;
    if (has_avr_ln_rl_ratio()) {
      total_size += 2 + 4;
    }

    // optional float cur_rn_rl_ratio = 26;
    if (has_cur_rn_rl_ratio()) {
      total_size += 2 + 4;
    }

    // optional float cur_ln_rl_ratio = 27;
    if (has_cur_ln_rl_ratio()) {
      total_size += 2 + 4;
    }

    // optional float cur_nose_rl_ratio = 28;
    if (has_cur_nose_rl_ratio()) {
      total_size += 2 + 4;
    }

    // optional float cur_nose_rl_ratio_side_thld = 29;
    if (has_cur_nose_rl_ratio_side_thld()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolicyParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolicyParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolicyParams::MergeFrom(const PolicyParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r_eye_gradient()) {
      set_r_eye_gradient(from.r_eye_gradient());
    }
    if (from.has_l_eye_gradient()) {
      set_l_eye_gradient(from.l_eye_gradient());
    }
    if (from.has_eye_gradient_thld()) {
      set_eye_gradient_thld(from.eye_gradient_thld());
    }
    if (from.has_avr_r_eye_close()) {
      set_avr_r_eye_close(from.avr_r_eye_close());
    }
    if (from.has_avr_l_eye_close()) {
      set_avr_l_eye_close(from.avr_l_eye_close());
    }
    if (from.has_avr_eyes_dist()) {
      set_avr_eyes_dist(from.avr_eyes_dist());
    }
    if (from.has_avr_eyes_dist_thld()) {
      set_avr_eyes_dist_thld(from.avr_eyes_dist_thld());
    }
    if (from.has_avr_l_eye_point()) {
      mutable_avr_l_eye_point()->::DMSFrameProtocol::Point::MergeFrom(from.avr_l_eye_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_avr_r_eye_point()) {
      mutable_avr_r_eye_point()->::DMSFrameProtocol::Point::MergeFrom(from.avr_r_eye_point());
    }
    if (from.has_avr_nose_leye_dist()) {
      set_avr_nose_leye_dist(from.avr_nose_leye_dist());
    }
    if (from.has_avr_nose_reye_dist()) {
      set_avr_nose_reye_dist(from.avr_nose_reye_dist());
    }
    if (from.has_avr_nose_point()) {
      mutable_avr_nose_point()->::DMSFrameProtocol::Point::MergeFrom(from.avr_nose_point());
    }
    if (from.has_avr_nose_rl_ratio()) {
      set_avr_nose_rl_ratio(from.avr_nose_rl_ratio());
    }
    if (from.has_avr_nose_rl_ratio_thld()) {
      set_avr_nose_rl_ratio_thld(from.avr_nose_rl_ratio_thld());
    }
    if (from.has_archor_nose_point()) {
      mutable_archor_nose_point()->::DMSFrameProtocol::Point::MergeFrom(from.archor_nose_point());
    }
    if (from.has_devi_nose_dist_x()) {
      set_devi_nose_dist_x(from.devi_nose_dist_x());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_devi_nose_dist_y()) {
      set_devi_nose_dist_y(from.devi_nose_dist_y());
    }
    if (from.has_devi_nose_dist_x_thld()) {
      set_devi_nose_dist_x_thld(from.devi_nose_dist_x_thld());
    }
    if (from.has_vari_nose_posi_x()) {
      set_vari_nose_posi_x(from.vari_nose_posi_x());
    }
    if (from.has_vari_nose_posi_y()) {
      set_vari_nose_posi_y(from.vari_nose_posi_y());
    }
    if (from.has_vari_nose_posi_x_thld()) {
      set_vari_nose_posi_x_thld(from.vari_nose_posi_x_thld());
    }
    if (from.has_vari_nose_posi_y_thld()) {
      set_vari_nose_posi_y_thld(from.vari_nose_posi_y_thld());
    }
    if (from.has_devi_nose_dist_y_thld()) {
      set_devi_nose_dist_y_thld(from.devi_nose_dist_y_thld());
    }
    if (from.has_avr_rn_rl_ratio()) {
      set_avr_rn_rl_ratio(from.avr_rn_rl_ratio());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_avr_ln_rl_ratio()) {
      set_avr_ln_rl_ratio(from.avr_ln_rl_ratio());
    }
    if (from.has_cur_rn_rl_ratio()) {
      set_cur_rn_rl_ratio(from.cur_rn_rl_ratio());
    }
    if (from.has_cur_ln_rl_ratio()) {
      set_cur_ln_rl_ratio(from.cur_ln_rl_ratio());
    }
    if (from.has_cur_nose_rl_ratio()) {
      set_cur_nose_rl_ratio(from.cur_nose_rl_ratio());
    }
    if (from.has_cur_nose_rl_ratio_side_thld()) {
      set_cur_nose_rl_ratio_side_thld(from.cur_nose_rl_ratio_side_thld());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolicyParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyParams::CopyFrom(const PolicyParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyParams::IsInitialized() const {

  if (has_avr_l_eye_point()) {
    if (!this->avr_l_eye_point().IsInitialized()) return false;
  }
  if (has_avr_r_eye_point()) {
    if (!this->avr_r_eye_point().IsInitialized()) return false;
  }
  if (has_avr_nose_point()) {
    if (!this->avr_nose_point().IsInitialized()) return false;
  }
  if (has_archor_nose_point()) {
    if (!this->archor_nose_point().IsInitialized()) return false;
  }
  return true;
}

void PolicyParams::Swap(PolicyParams* other) {
  if (other != this) {
    std::swap(r_eye_gradient_, other->r_eye_gradient_);
    std::swap(l_eye_gradient_, other->l_eye_gradient_);
    std::swap(eye_gradient_thld_, other->eye_gradient_thld_);
    std::swap(avr_r_eye_close_, other->avr_r_eye_close_);
    std::swap(avr_l_eye_close_, other->avr_l_eye_close_);
    std::swap(avr_eyes_dist_, other->avr_eyes_dist_);
    std::swap(avr_eyes_dist_thld_, other->avr_eyes_dist_thld_);
    std::swap(avr_l_eye_point_, other->avr_l_eye_point_);
    std::swap(avr_r_eye_point_, other->avr_r_eye_point_);
    std::swap(avr_nose_leye_dist_, other->avr_nose_leye_dist_);
    std::swap(avr_nose_reye_dist_, other->avr_nose_reye_dist_);
    std::swap(avr_nose_point_, other->avr_nose_point_);
    std::swap(avr_nose_rl_ratio_, other->avr_nose_rl_ratio_);
    std::swap(avr_nose_rl_ratio_thld_, other->avr_nose_rl_ratio_thld_);
    std::swap(archor_nose_point_, other->archor_nose_point_);
    std::swap(devi_nose_dist_x_, other->devi_nose_dist_x_);
    std::swap(devi_nose_dist_y_, other->devi_nose_dist_y_);
    std::swap(devi_nose_dist_x_thld_, other->devi_nose_dist_x_thld_);
    std::swap(vari_nose_posi_x_, other->vari_nose_posi_x_);
    std::swap(vari_nose_posi_y_, other->vari_nose_posi_y_);
    std::swap(vari_nose_posi_x_thld_, other->vari_nose_posi_x_thld_);
    std::swap(vari_nose_posi_y_thld_, other->vari_nose_posi_y_thld_);
    std::swap(devi_nose_dist_y_thld_, other->devi_nose_dist_y_thld_);
    std::swap(avr_rn_rl_ratio_, other->avr_rn_rl_ratio_);
    std::swap(avr_ln_rl_ratio_, other->avr_ln_rl_ratio_);
    std::swap(cur_rn_rl_ratio_, other->cur_rn_rl_ratio_);
    std::swap(cur_ln_rl_ratio_, other->cur_ln_rl_ratio_);
    std::swap(cur_nose_rl_ratio_, other->cur_nose_rl_ratio_);
    std::swap(cur_nose_rl_ratio_side_thld_, other->cur_nose_rl_ratio_side_thld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolicyParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolicyParams_descriptor_;
  metadata.reflection = PolicyParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonitorResult::kWarnStateFieldNumber;
const int MonitorResult::kDurTimeFieldNumber;
const int MonitorResult::kPolicyParamsFieldNumber;
const int MonitorResult::kFaceDirFieldNumber;
#endif  // !_MSC_VER

MonitorResult::MonitorResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.MonitorResult)
}

void MonitorResult::InitAsDefaultInstance() {
  policy_params_ = const_cast< ::DMSFrameProtocol::PolicyParams*>(&::DMSFrameProtocol::PolicyParams::default_instance());
}

MonitorResult::MonitorResult(const MonitorResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.MonitorResult)
}

void MonitorResult::SharedCtor() {
  _cached_size_ = 0;
  warn_state_ = 0;
  dur_time_ = GOOGLE_LONGLONG(0);
  policy_params_ = NULL;
  face_dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorResult::~MonitorResult() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.MonitorResult)
  SharedDtor();
}

void MonitorResult::SharedDtor() {
  if (this != default_instance_) {
    delete policy_params_;
  }
}

void MonitorResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorResult_descriptor_;
}

const MonitorResult& MonitorResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

MonitorResult* MonitorResult::default_instance_ = NULL;

MonitorResult* MonitorResult::New() const {
  return new MonitorResult;
}

void MonitorResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MonitorResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(dur_time_, face_dir_);
    if (has_policy_params()) {
      if (policy_params_ != NULL) policy_params_->::DMSFrameProtocol::PolicyParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonitorResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.MonitorResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSFrameProtocol.WarnState warn_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DMSFrameProtocol::WarnState_IsValid(value)) {
            set_warn_state(static_cast< ::DMSFrameProtocol::WarnState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dur_time;
        break;
      }

      // required int64 dur_time = 2;
      case 2: {
        if (tag == 16) {
         parse_dur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dur_time_)));
          set_has_dur_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_policy_params;
        break;
      }

      // optional .DMSFrameProtocol.PolicyParams policy_params = 3;
      case 3: {
        if (tag == 26) {
         parse_policy_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_policy_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_face_dir;
        break;
      }

      // optional .DMSFrameProtocol.FaceDir face_dir = 4;
      case 4: {
        if (tag == 32) {
         parse_face_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DMSFrameProtocol::FaceDir_IsValid(value)) {
            set_face_dir(static_cast< ::DMSFrameProtocol::FaceDir >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.MonitorResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.MonitorResult)
  return false;
#undef DO_
}

void MonitorResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.MonitorResult)
  // required .DMSFrameProtocol.WarnState warn_state = 1;
  if (has_warn_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->warn_state(), output);
  }

  // required int64 dur_time = 2;
  if (has_dur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dur_time(), output);
  }

  // optional .DMSFrameProtocol.PolicyParams policy_params = 3;
  if (has_policy_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->policy_params(), output);
  }

  // optional .DMSFrameProtocol.FaceDir face_dir = 4;
  if (has_face_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->face_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.MonitorResult)
}

::google::protobuf::uint8* MonitorResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.MonitorResult)
  // required .DMSFrameProtocol.WarnState warn_state = 1;
  if (has_warn_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->warn_state(), target);
  }

  // required int64 dur_time = 2;
  if (has_dur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dur_time(), target);
  }

  // optional .DMSFrameProtocol.PolicyParams policy_params = 3;
  if (has_policy_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->policy_params(), target);
  }

  // optional .DMSFrameProtocol.FaceDir face_dir = 4;
  if (has_face_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->face_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.MonitorResult)
  return target;
}

int MonitorResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSFrameProtocol.WarnState warn_state = 1;
    if (has_warn_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->warn_state());
    }

    // required int64 dur_time = 2;
    if (has_dur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dur_time());
    }

    // optional .DMSFrameProtocol.PolicyParams policy_params = 3;
    if (has_policy_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->policy_params());
    }

    // optional .DMSFrameProtocol.FaceDir face_dir = 4;
    if (has_face_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->face_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonitorResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonitorResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonitorResult::MergeFrom(const MonitorResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warn_state()) {
      set_warn_state(from.warn_state());
    }
    if (from.has_dur_time()) {
      set_dur_time(from.dur_time());
    }
    if (from.has_policy_params()) {
      mutable_policy_params()->::DMSFrameProtocol::PolicyParams::MergeFrom(from.policy_params());
    }
    if (from.has_face_dir()) {
      set_face_dir(from.face_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonitorResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorResult::CopyFrom(const MonitorResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_policy_params()) {
    if (!this->policy_params().IsInitialized()) return false;
  }
  return true;
}

void MonitorResult::Swap(MonitorResult* other) {
  if (other != this) {
    std::swap(warn_state_, other->warn_state_);
    std::swap(dur_time_, other->dur_time_);
    std::swap(policy_params_, other->policy_params_);
    std::swap(face_dir_, other->face_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonitorResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorResult_descriptor_;
  metadata.reflection = MonitorResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceRecogResult::kPersionIdFieldNumber;
const int FaceRecogResult::kPersionNameFieldNumber;
const int FaceRecogResult::kPersionTimestampFieldNumber;
const int FaceRecogResult::kPersionFrameIdFieldNumber;
const int FaceRecogResult::kPersionDetectROIFieldNumber;
const int FaceRecogResult::kPersionResultROIFieldNumber;
#endif  // !_MSC_VER

FaceRecogResult::FaceRecogResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.FaceRecogResult)
}

void FaceRecogResult::InitAsDefaultInstance() {
  persion_detect_roi_ = const_cast< ::DMSFrameProtocol::Rect_i*>(&::DMSFrameProtocol::Rect_i::default_instance());
  persion_result_roi_ = const_cast< ::DMSFrameProtocol::Rect_i*>(&::DMSFrameProtocol::Rect_i::default_instance());
}

FaceRecogResult::FaceRecogResult(const FaceRecogResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.FaceRecogResult)
}

void FaceRecogResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  persion_id_ = 0;
  persion_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persion_timestamp_ = GOOGLE_LONGLONG(0);
  persion_frame_id_ = 0;
  persion_detect_roi_ = NULL;
  persion_result_roi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceRecogResult::~FaceRecogResult() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.FaceRecogResult)
  SharedDtor();
}

void FaceRecogResult::SharedDtor() {
  if (persion_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persion_name_;
  }
  if (this != default_instance_) {
    delete persion_detect_roi_;
    delete persion_result_roi_;
  }
}

void FaceRecogResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaceRecogResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceRecogResult_descriptor_;
}

const FaceRecogResult& FaceRecogResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

FaceRecogResult* FaceRecogResult::default_instance_ = NULL;

FaceRecogResult* FaceRecogResult::New() const {
  return new FaceRecogResult;
}

void FaceRecogResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FaceRecogResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(persion_id_, persion_timestamp_);
    if (has_persion_name()) {
      if (persion_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        persion_name_->clear();
      }
    }
    if (has_persion_detect_roi()) {
      if (persion_detect_roi_ != NULL) persion_detect_roi_->::DMSFrameProtocol::Rect_i::Clear();
    }
    if (has_persion_result_roi()) {
      if (persion_result_roi_ != NULL) persion_result_roi_->::DMSFrameProtocol::Rect_i::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceRecogResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.FaceRecogResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 persion_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &persion_id_)));
          set_has_persion_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_persion_name;
        break;
      }

      // optional string persion_name = 2;
      case 2: {
        if (tag == 18) {
         parse_persion_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persion_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persion_name().data(), this->persion_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "persion_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_persion_timestamp;
        break;
      }

      // optional int64 persion_timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_persion_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &persion_timestamp_)));
          set_has_persion_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_persion_frame_id;
        break;
      }

      // optional int32 persion_frame_id = 4;
      case 4: {
        if (tag == 32) {
         parse_persion_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &persion_frame_id_)));
          set_has_persion_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_persion_detect_ROI;
        break;
      }

      // optional .DMSFrameProtocol.Rect_i persion_detect_ROI = 5;
      case 5: {
        if (tag == 42) {
         parse_persion_detect_ROI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persion_detect_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_persion_result_ROI;
        break;
      }

      // optional .DMSFrameProtocol.Rect_i persion_result_ROI = 6;
      case 6: {
        if (tag == 50) {
         parse_persion_result_ROI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persion_result_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.FaceRecogResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.FaceRecogResult)
  return false;
#undef DO_
}

void FaceRecogResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.FaceRecogResult)
  // optional int32 persion_id = 1;
  if (has_persion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->persion_id(), output);
  }

  // optional string persion_name = 2;
  if (has_persion_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persion_name().data(), this->persion_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persion_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persion_name(), output);
  }

  // optional int64 persion_timestamp = 3;
  if (has_persion_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->persion_timestamp(), output);
  }

  // optional int32 persion_frame_id = 4;
  if (has_persion_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->persion_frame_id(), output);
  }

  // optional .DMSFrameProtocol.Rect_i persion_detect_ROI = 5;
  if (has_persion_detect_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->persion_detect_roi(), output);
  }

  // optional .DMSFrameProtocol.Rect_i persion_result_ROI = 6;
  if (has_persion_result_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->persion_result_roi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.FaceRecogResult)
}

::google::protobuf::uint8* FaceRecogResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.FaceRecogResult)
  // optional int32 persion_id = 1;
  if (has_persion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->persion_id(), target);
  }

  // optional string persion_name = 2;
  if (has_persion_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persion_name().data(), this->persion_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "persion_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persion_name(), target);
  }

  // optional int64 persion_timestamp = 3;
  if (has_persion_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->persion_timestamp(), target);
  }

  // optional int32 persion_frame_id = 4;
  if (has_persion_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->persion_frame_id(), target);
  }

  // optional .DMSFrameProtocol.Rect_i persion_detect_ROI = 5;
  if (has_persion_detect_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->persion_detect_roi(), target);
  }

  // optional .DMSFrameProtocol.Rect_i persion_result_ROI = 6;
  if (has_persion_result_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->persion_result_roi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.FaceRecogResult)
  return target;
}

int FaceRecogResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 persion_id = 1;
    if (has_persion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->persion_id());
    }

    // optional string persion_name = 2;
    if (has_persion_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persion_name());
    }

    // optional int64 persion_timestamp = 3;
    if (has_persion_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->persion_timestamp());
    }

    // optional int32 persion_frame_id = 4;
    if (has_persion_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->persion_frame_id());
    }

    // optional .DMSFrameProtocol.Rect_i persion_detect_ROI = 5;
    if (has_persion_detect_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->persion_detect_roi());
    }

    // optional .DMSFrameProtocol.Rect_i persion_result_ROI = 6;
    if (has_persion_result_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->persion_result_roi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceRecogResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceRecogResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FaceRecogResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceRecogResult::MergeFrom(const FaceRecogResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persion_id()) {
      set_persion_id(from.persion_id());
    }
    if (from.has_persion_name()) {
      set_persion_name(from.persion_name());
    }
    if (from.has_persion_timestamp()) {
      set_persion_timestamp(from.persion_timestamp());
    }
    if (from.has_persion_frame_id()) {
      set_persion_frame_id(from.persion_frame_id());
    }
    if (from.has_persion_detect_roi()) {
      mutable_persion_detect_roi()->::DMSFrameProtocol::Rect_i::MergeFrom(from.persion_detect_roi());
    }
    if (from.has_persion_result_roi()) {
      mutable_persion_result_roi()->::DMSFrameProtocol::Rect_i::MergeFrom(from.persion_result_roi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceRecogResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceRecogResult::CopyFrom(const FaceRecogResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecogResult::IsInitialized() const {

  if (has_persion_detect_roi()) {
    if (!this->persion_detect_roi().IsInitialized()) return false;
  }
  if (has_persion_result_roi()) {
    if (!this->persion_result_roi().IsInitialized()) return false;
  }
  return true;
}

void FaceRecogResult::Swap(FaceRecogResult* other) {
  if (other != this) {
    std::swap(persion_id_, other->persion_id_);
    std::swap(persion_name_, other->persion_name_);
    std::swap(persion_timestamp_, other->persion_timestamp_);
    std::swap(persion_frame_id_, other->persion_frame_id_);
    std::swap(persion_detect_roi_, other->persion_detect_roi_);
    std::swap(persion_result_roi_, other->persion_result_roi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceRecogResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceRecogResult_descriptor_;
  metadata.reflection = FaceRecogResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CANInfo::kAngleFieldNumber;
const int CANInfo::kDirectionFieldNumber;
const int CANInfo::kGearsFieldNumber;
const int CANInfo::kSpeedFieldNumber;
const int CANInfo::kTimestampFieldNumber;
#endif  // !_MSC_VER

CANInfo::CANInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.CANInfo)
}

void CANInfo::InitAsDefaultInstance() {
}

CANInfo::CANInfo(const CANInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.CANInfo)
}

void CANInfo::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  direction_ = 0;
  gears_ = 0;
  speed_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CANInfo::~CANInfo() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.CANInfo)
  SharedDtor();
}

void CANInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CANInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CANInfo_descriptor_;
}

const CANInfo& CANInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

CANInfo* CANInfo::default_instance_ = NULL;

CANInfo* CANInfo::New() const {
  return new CANInfo;
}

void CANInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CANInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(angle_, timestamp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CANInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.CANInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Angle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Direction;
        break;
      }

      // optional int32 Direction = 2;
      case 2: {
        if (tag == 16) {
         parse_Direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Gears;
        break;
      }

      // optional int32 Gears = 3;
      case 3: {
        if (tag == 24) {
         parse_Gears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gears_)));
          set_has_gears();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Speed;
        break;
      }

      // optional int32 Speed = 4;
      case 4: {
        if (tag == 32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.CANInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.CANInfo)
  return false;
#undef DO_
}

void CANInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.CANInfo)
  // optional int32 Angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  // optional int32 Direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->direction(), output);
  }

  // optional int32 Gears = 3;
  if (has_gears()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gears(), output);
  }

  // optional int32 Speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.CANInfo)
}

::google::protobuf::uint8* CANInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.CANInfo)
  // optional int32 Angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  // optional int32 Direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->direction(), target);
  }

  // optional int32 Gears = 3;
  if (has_gears()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gears(), target);
  }

  // optional int32 Speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speed(), target);
  }

  // optional int64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.CANInfo)
  return target;
}

int CANInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

    // optional int32 Direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional int32 Gears = 3;
    if (has_gears()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gears());
    }

    // optional int32 Speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CANInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CANInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CANInfo::MergeFrom(const CANInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_gears()) {
      set_gears(from.gears());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CANInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANInfo::CopyFrom(const CANInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANInfo::IsInitialized() const {

  return true;
}

void CANInfo::Swap(CANInfo* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(direction_, other->direction_);
    std::swap(gears_, other->gears_);
    std::swap(speed_, other->speed_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CANInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CANInfo_descriptor_;
  metadata.reflection = CANInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageInfo::kTimeFieldNumber;
const int ImageInfo::kWidthFieldNumber;
const int ImageInfo::kHeightFieldNumber;
const int ImageInfo::kFormatFieldNumber;
const int ImageInfo::kLumaFieldNumber;
const int ImageInfo::kImgIdFieldNumber;
#endif  // !_MSC_VER

ImageInfo::ImageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.ImageInfo)
}

void ImageInfo::InitAsDefaultInstance() {
}

ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.ImageInfo)
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  width_ = 0;
  height_ = 0;
  format_ = 0;
  luma_ = 0;
  img_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageInfo_descriptor_;
}

const ImageInfo& ImageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

ImageInfo* ImageInfo::default_instance_ = NULL;

ImageInfo* ImageInfo::New() const {
  return new ImageInfo;
}

void ImageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ImageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(time_, img_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // required int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_format;
        break;
      }

      // required int32 format = 4;
      case 4: {
        if (tag == 32) {
         parse_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &format_)));
          set_has_format();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_luma;
        break;
      }

      // required int32 luma = 5;
      case 5: {
        if (tag == 40) {
         parse_luma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luma_)));
          set_has_luma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_img_id;
        break;
      }

      // optional int32 img_id = 6;
      case 6: {
        if (tag == 48) {
         parse_img_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &img_id_)));
          set_has_img_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.ImageInfo)
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // required int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // required int32 format = 4;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->format(), output);
  }

  // required int32 luma = 5;
  if (has_luma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->luma(), output);
  }

  // optional int32 img_id = 6;
  if (has_img_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->img_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.ImageInfo)
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // required int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // required int32 format = 4;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->format(), target);
  }

  // required int32 luma = 5;
  if (has_luma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->luma(), target);
  }

  // optional int32 img_id = 6;
  if (has_img_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->img_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.ImageInfo)
  return target;
}

int ImageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 format = 4;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->format());
    }

    // required int32 luma = 5;
    if (has_luma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luma());
    }

    // optional int32 img_id = 6;
    if (has_img_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->img_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_luma()) {
      set_luma(from.luma());
    }
    if (from.has_img_id()) {
      set_img_id(from.img_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(format_, other->format_);
    std::swap(luma_, other->luma_);
    std::swap(img_id_, other->img_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageInfo_descriptor_;
  metadata.reflection = ImageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DMSFrame::kFrameIdFieldNumber;
const int DMSFrame::kImageFieldNumber;
const int DMSFrame::kAlgoResultFieldNumber;
const int DMSFrame::kMonitorResultFieldNumber;
const int DMSFrame::kCanInfoFieldNumber;
const int DMSFrame::kSeekFlagFieldNumber;
const int DMSFrame::kFacerecogResultFieldNumber;
#endif  // !_MSC_VER

DMSFrame::DMSFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSFrameProtocol.DMSFrame)
}

void DMSFrame::InitAsDefaultInstance() {
  image_ = const_cast< ::DMSFrameProtocol::ImageInfo*>(&::DMSFrameProtocol::ImageInfo::default_instance());
  algo_result_ = const_cast< ::DMSFrameProtocol::AlgoResult*>(&::DMSFrameProtocol::AlgoResult::default_instance());
  monitor_result_ = const_cast< ::DMSFrameProtocol::MonitorResult*>(&::DMSFrameProtocol::MonitorResult::default_instance());
  facerecog_result_ = const_cast< ::DMSFrameProtocol::FaceRecogResult*>(&::DMSFrameProtocol::FaceRecogResult::default_instance());
}

DMSFrame::DMSFrame(const DMSFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSFrameProtocol.DMSFrame)
}

void DMSFrame::SharedCtor() {
  _cached_size_ = 0;
  frame_id_ = 0;
  image_ = NULL;
  algo_result_ = NULL;
  monitor_result_ = NULL;
  seek_flag_ = false;
  facerecog_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DMSFrame::~DMSFrame() {
  // @@protoc_insertion_point(destructor:DMSFrameProtocol.DMSFrame)
  SharedDtor();
}

void DMSFrame::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete algo_result_;
    delete monitor_result_;
    delete facerecog_result_;
  }
}

void DMSFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DMSFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DMSFrame_descriptor_;
}

const DMSFrame& DMSFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DMSFrame_2eproto();
  return *default_instance_;
}

DMSFrame* DMSFrame::default_instance_ = NULL;

DMSFrame* DMSFrame::New() const {
  return new DMSFrame;
}

void DMSFrame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DMSFrame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(frame_id_, seek_flag_);
    if (has_image()) {
      if (image_ != NULL) image_->::DMSFrameProtocol::ImageInfo::Clear();
    }
    if (has_algo_result()) {
      if (algo_result_ != NULL) algo_result_->::DMSFrameProtocol::AlgoResult::Clear();
    }
    if (has_monitor_result()) {
      if (monitor_result_ != NULL) monitor_result_->::DMSFrameProtocol::MonitorResult::Clear();
    }
    if (has_facerecog_result()) {
      if (facerecog_result_ != NULL) facerecog_result_->::DMSFrameProtocol::FaceRecogResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  can_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DMSFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSFrameProtocol.DMSFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional .DMSFrameProtocol.ImageInfo image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_algo_result;
        break;
      }

      // optional .DMSFrameProtocol.AlgoResult algo_result = 3;
      case 3: {
        if (tag == 26) {
         parse_algo_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_algo_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_monitor_result;
        break;
      }

      // optional .DMSFrameProtocol.MonitorResult monitor_result = 4;
      case 4: {
        if (tag == 34) {
         parse_monitor_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monitor_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_can_info;
        break;
      }

      // repeated .DMSFrameProtocol.CANInfo can_info = 5;
      case 5: {
        if (tag == 42) {
         parse_can_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_can_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_can_info;
        if (input->ExpectTag(48)) goto parse_seek_flag;
        break;
      }

      // optional bool seek_flag = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_seek_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seek_flag_)));
          set_has_seek_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_facerecog_result;
        break;
      }

      // optional .DMSFrameProtocol.FaceRecogResult facerecog_result = 7;
      case 7: {
        if (tag == 58) {
         parse_facerecog_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facerecog_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSFrameProtocol.DMSFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSFrameProtocol.DMSFrame)
  return false;
#undef DO_
}

void DMSFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DMSFrameProtocol.DMSFrame)
  // optional int32 frame_id = 1;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_id(), output);
  }

  // optional .DMSFrameProtocol.ImageInfo image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image(), output);
  }

  // optional .DMSFrameProtocol.AlgoResult algo_result = 3;
  if (has_algo_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->algo_result(), output);
  }

  // optional .DMSFrameProtocol.MonitorResult monitor_result = 4;
  if (has_monitor_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monitor_result(), output);
  }

  // repeated .DMSFrameProtocol.CANInfo can_info = 5;
  for (int i = 0; i < this->can_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->can_info(i), output);
  }

  // optional bool seek_flag = 6 [default = false];
  if (has_seek_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->seek_flag(), output);
  }

  // optional .DMSFrameProtocol.FaceRecogResult facerecog_result = 7;
  if (has_facerecog_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->facerecog_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSFrameProtocol.DMSFrame)
}

::google::protobuf::uint8* DMSFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSFrameProtocol.DMSFrame)
  // optional int32 frame_id = 1;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_id(), target);
  }

  // optional .DMSFrameProtocol.ImageInfo image = 2;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image(), target);
  }

  // optional .DMSFrameProtocol.AlgoResult algo_result = 3;
  if (has_algo_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->algo_result(), target);
  }

  // optional .DMSFrameProtocol.MonitorResult monitor_result = 4;
  if (has_monitor_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monitor_result(), target);
  }

  // repeated .DMSFrameProtocol.CANInfo can_info = 5;
  for (int i = 0; i < this->can_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->can_info(i), target);
  }

  // optional bool seek_flag = 6 [default = false];
  if (has_seek_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->seek_flag(), target);
  }

  // optional .DMSFrameProtocol.FaceRecogResult facerecog_result = 7;
  if (has_facerecog_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->facerecog_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSFrameProtocol.DMSFrame)
  return target;
}

int DMSFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 frame_id = 1;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }

    // optional .DMSFrameProtocol.ImageInfo image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .DMSFrameProtocol.AlgoResult algo_result = 3;
    if (has_algo_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->algo_result());
    }

    // optional .DMSFrameProtocol.MonitorResult monitor_result = 4;
    if (has_monitor_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monitor_result());
    }

    // optional bool seek_flag = 6 [default = false];
    if (has_seek_flag()) {
      total_size += 1 + 1;
    }

    // optional .DMSFrameProtocol.FaceRecogResult facerecog_result = 7;
    if (has_facerecog_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facerecog_result());
    }

  }
  // repeated .DMSFrameProtocol.CANInfo can_info = 5;
  total_size += 1 * this->can_info_size();
  for (int i = 0; i < this->can_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->can_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DMSFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DMSFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DMSFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DMSFrame::MergeFrom(const DMSFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_info_.MergeFrom(from.can_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_image()) {
      mutable_image()->::DMSFrameProtocol::ImageInfo::MergeFrom(from.image());
    }
    if (from.has_algo_result()) {
      mutable_algo_result()->::DMSFrameProtocol::AlgoResult::MergeFrom(from.algo_result());
    }
    if (from.has_monitor_result()) {
      mutable_monitor_result()->::DMSFrameProtocol::MonitorResult::MergeFrom(from.monitor_result());
    }
    if (from.has_seek_flag()) {
      set_seek_flag(from.seek_flag());
    }
    if (from.has_facerecog_result()) {
      mutable_facerecog_result()->::DMSFrameProtocol::FaceRecogResult::MergeFrom(from.facerecog_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DMSFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DMSFrame::CopyFrom(const DMSFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DMSFrame::IsInitialized() const {

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (has_algo_result()) {
    if (!this->algo_result().IsInitialized()) return false;
  }
  if (has_monitor_result()) {
    if (!this->monitor_result().IsInitialized()) return false;
  }
  if (has_facerecog_result()) {
    if (!this->facerecog_result().IsInitialized()) return false;
  }
  return true;
}

void DMSFrame::Swap(DMSFrame* other) {
  if (other != this) {
    std::swap(frame_id_, other->frame_id_);
    std::swap(image_, other->image_);
    std::swap(algo_result_, other->algo_result_);
    std::swap(monitor_result_, other->monitor_result_);
    can_info_.Swap(&other->can_info_);
    std::swap(seek_flag_, other->seek_flag_);
    std::swap(facerecog_result_, other->facerecog_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DMSFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DMSFrame_descriptor_;
  metadata.reflection = DMSFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DMSFrameProtocol

// @@protoc_insertion_point(global_scope)
