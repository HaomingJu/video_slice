# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_slice_video_py', [dirname(__file__)])
        except ImportError:
            import _slice_video_py
            return _slice_video_py
        if fp is not None:
            try:
                _mod = imp.load_module('_slice_video_py', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _slice_video_py = swig_import_helper()
    del swig_import_helper
else:
    import _slice_video_py
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Slice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slice, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Init(self, arg2, arg3):
        return _slice_video_py.Slice_Init(self, arg2, arg3)

    def Cut(self, *args):
        return _slice_video_py.Slice_Cut(self, *args)
    __swig_destroy__ = _slice_video_py.delete_Slice
    __del__ = lambda self: None
Slice_swigregister = _slice_video_py.Slice_swigregister
Slice_swigregister(Slice)

class DMS_Slice(Slice):
    __swig_setmethods__ = {}
    for _s in [Slice]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DMS_Slice, name, value)
    __swig_getmethods__ = {}
    for _s in [Slice]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DMS_Slice, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _slice_video_py.new_DMS_Slice()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _slice_video_py.delete_DMS_Slice
    __del__ = lambda self: None

    def Cut(self, *args):
        return _slice_video_py.DMS_Slice_Cut(self, *args)
DMS_Slice_swigregister = _slice_video_py.DMS_Slice_swigregister
DMS_Slice_swigregister(DMS_Slice)

class ADAS_Slice(Slice):
    __swig_setmethods__ = {}
    for _s in [Slice]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ADAS_Slice, name, value)
    __swig_getmethods__ = {}
    for _s in [Slice]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ADAS_Slice, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _slice_video_py.new_ADAS_Slice()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _slice_video_py.delete_ADAS_Slice
    __del__ = lambda self: None

    def Cut(self, *args):
        return _slice_video_py.ADAS_Slice_Cut(self, *args)
ADAS_Slice_swigregister = _slice_video_py.ADAS_Slice_swigregister
ADAS_Slice_swigregister(ADAS_Slice)

# This file is compatible with both classic and new-style classes.


