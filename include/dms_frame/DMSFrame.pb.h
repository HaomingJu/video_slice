// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DMSFrame.proto

#ifndef PROTOBUF_DMSFrame_2eproto__INCLUDED
#define PROTOBUF_DMSFrame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DMSFrameProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_DMSFrame_2eproto();
void protobuf_AssignDesc_DMSFrame_2eproto();
void protobuf_ShutdownFile_DMSFrame_2eproto();

class Rect;
class Rect_i;
class Point;
class Face;
class LandMark21;
class Eye;
class Eyes;
class AlgoResult;
class PolicyParams;
class MonitorResult;
class FaceRecogResult;
class CANInfo;
class ImageInfo;
class DMSFrame;

enum WarnState {
  NONE = 0,
  W_NOFACE = 1,
  E_NOFACE = 2,
  W_DISTRACT = 3,
  E_DISTRACT = 4,
  W_FATIGUE = 5,
  E_FATIGUE = 6,
  DANGER = 7,
  SIZE = 8
};
bool WarnState_IsValid(int value);
const WarnState WarnState_MIN = NONE;
const WarnState WarnState_MAX = SIZE;
const int WarnState_ARRAYSIZE = WarnState_MAX + 1;

const ::google::protobuf::EnumDescriptor *WarnState_descriptor();
inline const ::std::string &WarnState_Name(WarnState value) {
  return ::google::protobuf::internal::NameOfEnum(WarnState_descriptor(),
                                                  value);
}
inline bool WarnState_Parse(const ::std::string &name, WarnState *value) {
  return ::google::protobuf::internal::ParseNamedEnum<WarnState>(
      WarnState_descriptor(), name, value);
}
enum FaceDir { FRONT = 0, LEFT = 1, RIGHT = 2, UP = 3, DOWN = 4 };
bool FaceDir_IsValid(int value);
const FaceDir FaceDir_MIN = FRONT;
const FaceDir FaceDir_MAX = DOWN;
const int FaceDir_ARRAYSIZE = FaceDir_MAX + 1;

const ::google::protobuf::EnumDescriptor *FaceDir_descriptor();
inline const ::std::string &FaceDir_Name(FaceDir value) {
  return ::google::protobuf::internal::NameOfEnum(FaceDir_descriptor(), value);
}
inline bool FaceDir_Parse(const ::std::string &name, FaceDir *value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaceDir>(
      FaceDir_descriptor(), name, value);
}
// ===================================================================

class Rect : public ::google::protobuf::Message {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect &from);

  inline Rect &operator=(const Rect &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const Rect &default_instance();

  void Swap(Rect *other);

  // implements Message ----------------------------------------------

  Rect *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const Rect &from);
  void MergeFrom(const Rect &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline float left() const;
  inline void set_left(float value);

  // required float right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline float right() const;
  inline void set_right(float value);

  // required float top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline float top() const;
  inline void set_top(float value);

  // required float bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline float bottom() const;
  inline void set_bottom(float value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.Rect)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_bottom();
  inline void clear_has_bottom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float left_;
  float right_;
  float top_;
  float bottom_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static Rect *default_instance_;
};
// -------------------------------------------------------------------

class Rect_i : public ::google::protobuf::Message {
 public:
  Rect_i();
  virtual ~Rect_i();

  Rect_i(const Rect_i &from);

  inline Rect_i &operator=(const Rect_i &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const Rect_i &default_instance();

  void Swap(Rect_i *other);

  // implements Message ----------------------------------------------

  Rect_i *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const Rect_i &from);
  void MergeFrom(const Rect_i &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);

  // required int32 right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);

  // required int32 top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);

  // required int32 bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.Rect_i)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_bottom();
  inline void clear_has_bottom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static Rect_i *default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point &from);

  inline Point &operator=(const Point &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const Point &default_instance();

  void Swap(Point *other);

  // implements Message ----------------------------------------------

  Point *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const Point &from);
  void MergeFrom(const Point &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static Point *default_instance_;
};
// -------------------------------------------------------------------

class Face : public ::google::protobuf::Message {
 public:
  Face();
  virtual ~Face();

  Face(const Face &from);

  inline Face &operator=(const Face &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const Face &default_instance();

  void Swap(Face *other);

  // implements Message ----------------------------------------------

  Face *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const Face &from);
  void MergeFrom(const Face &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DMSFrameProtocol.Rect ROI = 1;
  inline bool has_roi() const;
  inline void clear_roi();
  static const int kROIFieldNumber = 1;
  inline const ::DMSFrameProtocol::Rect &roi() const;
  inline ::DMSFrameProtocol::Rect *mutable_roi();
  inline ::DMSFrameProtocol::Rect *release_roi();
  inline void set_allocated_roi(::DMSFrameProtocol::Rect *roi);

  // required float score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline float score() const;
  inline void set_score(float value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.Face)
 private:
  inline void set_has_roi();
  inline void clear_has_roi();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DMSFrameProtocol::Rect *roi_;
  float score_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static Face *default_instance_;
};
// -------------------------------------------------------------------

class LandMark21 : public ::google::protobuf::Message {
 public:
  LandMark21();
  virtual ~LandMark21();

  LandMark21(const LandMark21 &from);

  inline LandMark21 &operator=(const LandMark21 &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const LandMark21 &default_instance();

  void Swap(LandMark21 *other);

  // implements Message ----------------------------------------------

  LandMark21 *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const LandMark21 &from);
  void MergeFrom(const LandMark21 &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DMSFrameProtocol.Point LDMK = 1;
  inline int ldmk_size() const;
  inline void clear_ldmk();
  static const int kLDMKFieldNumber = 1;
  inline const ::DMSFrameProtocol::Point &ldmk(int index) const;
  inline ::DMSFrameProtocol::Point *mutable_ldmk(int index);
  inline ::DMSFrameProtocol::Point *add_ldmk();
  inline const ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Point>
      &ldmk() const;
  inline ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Point>
      *mutable_ldmk();

  // repeated float score = 2;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline float score(int index) const;
  inline void set_score(int index, float value);
  inline void add_score(float value);
  inline const ::google::protobuf::RepeatedField<float> &score() const;
  inline ::google::protobuf::RepeatedField<float> *mutable_score();

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.LandMark21)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Point> ldmk_;
  ::google::protobuf::RepeatedField<float> score_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static LandMark21 *default_instance_;
};
// -------------------------------------------------------------------

class Eye : public ::google::protobuf::Message {
 public:
  Eye();
  virtual ~Eye();

  Eye(const Eye &from);

  inline Eye &operator=(const Eye &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const Eye &default_instance();

  void Swap(Eye *other);

  // implements Message ----------------------------------------------

  Eye *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const Eye &from);
  void MergeFrom(const Eye &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DMSFrameProtocol.Rect ROI = 1;
  inline bool has_roi() const;
  inline void clear_roi();
  static const int kROIFieldNumber = 1;
  inline const ::DMSFrameProtocol::Rect &roi() const;
  inline ::DMSFrameProtocol::Rect *mutable_roi();
  inline ::DMSFrameProtocol::Rect *release_roi();
  inline void set_allocated_roi(::DMSFrameProtocol::Rect *roi);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required float open_score = 3;
  inline bool has_open_score() const;
  inline void clear_open_score();
  static const int kOpenScoreFieldNumber = 3;
  inline float open_score() const;
  inline void set_open_score(float value);

  // required float close_score = 4;
  inline bool has_close_score() const;
  inline void clear_close_score();
  static const int kCloseScoreFieldNumber = 4;
  inline float close_score() const;
  inline void set_close_score(float value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.Eye)
 private:
  inline void set_has_roi();
  inline void clear_has_roi();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_open_score();
  inline void clear_has_open_score();
  inline void set_has_close_score();
  inline void clear_has_close_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DMSFrameProtocol::Rect *roi_;
  ::google::protobuf::int32 status_;
  float open_score_;
  float close_score_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static Eye *default_instance_;
};
// -------------------------------------------------------------------

class Eyes : public ::google::protobuf::Message {
 public:
  Eyes();
  virtual ~Eyes();

  Eyes(const Eyes &from);

  inline Eyes &operator=(const Eyes &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const Eyes &default_instance();

  void Swap(Eyes *other);

  // implements Message ----------------------------------------------

  Eyes *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const Eyes &from);
  void MergeFrom(const Eyes &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DMSFrameProtocol.Eye left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline const ::DMSFrameProtocol::Eye &left() const;
  inline ::DMSFrameProtocol::Eye *mutable_left();
  inline ::DMSFrameProtocol::Eye *release_left();
  inline void set_allocated_left(::DMSFrameProtocol::Eye *left);

  // required .DMSFrameProtocol.Eye right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline const ::DMSFrameProtocol::Eye &right() const;
  inline ::DMSFrameProtocol::Eye *mutable_right();
  inline ::DMSFrameProtocol::Eye *release_right();
  inline void set_allocated_right(::DMSFrameProtocol::Eye *right);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.Eyes)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DMSFrameProtocol::Eye *left_;
  ::DMSFrameProtocol::Eye *right_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static Eyes *default_instance_;
};
// -------------------------------------------------------------------

class AlgoResult : public ::google::protobuf::Message {
 public:
  AlgoResult();
  virtual ~AlgoResult();

  AlgoResult(const AlgoResult &from);

  inline AlgoResult &operator=(const AlgoResult &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const AlgoResult &default_instance();

  void Swap(AlgoResult *other);

  // implements Message ----------------------------------------------

  AlgoResult *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const AlgoResult &from);
  void MergeFrom(const AlgoResult &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DMSFrameProtocol.Face face_original_ROIs = 1;
  inline int face_original_rois_size() const;
  inline void clear_face_original_rois();
  static const int kFaceOriginalROIsFieldNumber = 1;
  inline const ::DMSFrameProtocol::Face &face_original_rois(int index) const;
  inline ::DMSFrameProtocol::Face *mutable_face_original_rois(int index);
  inline ::DMSFrameProtocol::Face *add_face_original_rois();
  inline const ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Face>
      &face_original_rois() const;
  inline ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Face>
      *mutable_face_original_rois();

  // optional .DMSFrameProtocol.Face face_filtered_ROIs = 2;
  inline bool has_face_filtered_rois() const;
  inline void clear_face_filtered_rois();
  static const int kFaceFilteredROIsFieldNumber = 2;
  inline const ::DMSFrameProtocol::Face &face_filtered_rois() const;
  inline ::DMSFrameProtocol::Face *mutable_face_filtered_rois();
  inline ::DMSFrameProtocol::Face *release_face_filtered_rois();
  inline void set_allocated_face_filtered_rois(
      ::DMSFrameProtocol::Face *face_filtered_rois);

  // optional .DMSFrameProtocol.LandMark21 landmark = 3;
  inline bool has_landmark() const;
  inline void clear_landmark();
  static const int kLandmarkFieldNumber = 3;
  inline const ::DMSFrameProtocol::LandMark21 &landmark() const;
  inline ::DMSFrameProtocol::LandMark21 *mutable_landmark();
  inline ::DMSFrameProtocol::LandMark21 *release_landmark();
  inline void set_allocated_landmark(::DMSFrameProtocol::LandMark21 *landmark);

  // optional .DMSFrameProtocol.Eyes eyes = 4;
  inline bool has_eyes() const;
  inline void clear_eyes();
  static const int kEyesFieldNumber = 4;
  inline const ::DMSFrameProtocol::Eyes &eyes() const;
  inline ::DMSFrameProtocol::Eyes *mutable_eyes();
  inline ::DMSFrameProtocol::Eyes *release_eyes();
  inline void set_allocated_eyes(::DMSFrameProtocol::Eyes *eyes);

  // optional .DMSFrameProtocol.Rect face_detect_ROI = 5;
  inline bool has_face_detect_roi() const;
  inline void clear_face_detect_roi();
  static const int kFaceDetectROIFieldNumber = 5;
  inline const ::DMSFrameProtocol::Rect &face_detect_roi() const;
  inline ::DMSFrameProtocol::Rect *mutable_face_detect_roi();
  inline ::DMSFrameProtocol::Rect *release_face_detect_roi();
  inline void set_allocated_face_detect_roi(
      ::DMSFrameProtocol::Rect *face_detect_roi);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.AlgoResult)
 private:
  inline void set_has_face_filtered_rois();
  inline void clear_has_face_filtered_rois();
  inline void set_has_landmark();
  inline void clear_has_landmark();
  inline void set_has_eyes();
  inline void clear_has_eyes();
  inline void set_has_face_detect_roi();
  inline void clear_has_face_detect_roi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Face>
      face_original_rois_;
  ::DMSFrameProtocol::Face *face_filtered_rois_;
  ::DMSFrameProtocol::LandMark21 *landmark_;
  ::DMSFrameProtocol::Eyes *eyes_;
  ::DMSFrameProtocol::Rect *face_detect_roi_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static AlgoResult *default_instance_;
};
// -------------------------------------------------------------------

class PolicyParams : public ::google::protobuf::Message {
 public:
  PolicyParams();
  virtual ~PolicyParams();

  PolicyParams(const PolicyParams &from);

  inline PolicyParams &operator=(const PolicyParams &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const PolicyParams &default_instance();

  void Swap(PolicyParams *other);

  // implements Message ----------------------------------------------

  PolicyParams *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const PolicyParams &from);
  void MergeFrom(const PolicyParams &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float r_eye_gradient = 1;
  inline bool has_r_eye_gradient() const;
  inline void clear_r_eye_gradient();
  static const int kREyeGradientFieldNumber = 1;
  inline float r_eye_gradient() const;
  inline void set_r_eye_gradient(float value);

  // optional float l_eye_gradient = 2;
  inline bool has_l_eye_gradient() const;
  inline void clear_l_eye_gradient();
  static const int kLEyeGradientFieldNumber = 2;
  inline float l_eye_gradient() const;
  inline void set_l_eye_gradient(float value);

  // optional float eye_gradient_thld = 3;
  inline bool has_eye_gradient_thld() const;
  inline void clear_eye_gradient_thld();
  static const int kEyeGradientThldFieldNumber = 3;
  inline float eye_gradient_thld() const;
  inline void set_eye_gradient_thld(float value);

  // optional float avr_r_eye_close = 4;
  inline bool has_avr_r_eye_close() const;
  inline void clear_avr_r_eye_close();
  static const int kAvrREyeCloseFieldNumber = 4;
  inline float avr_r_eye_close() const;
  inline void set_avr_r_eye_close(float value);

  // optional float avr_l_eye_close = 5;
  inline bool has_avr_l_eye_close() const;
  inline void clear_avr_l_eye_close();
  static const int kAvrLEyeCloseFieldNumber = 5;
  inline float avr_l_eye_close() const;
  inline void set_avr_l_eye_close(float value);

  // optional float avr_eyes_dist = 6;
  inline bool has_avr_eyes_dist() const;
  inline void clear_avr_eyes_dist();
  static const int kAvrEyesDistFieldNumber = 6;
  inline float avr_eyes_dist() const;
  inline void set_avr_eyes_dist(float value);

  // optional float avr_eyes_dist_thld = 7;
  inline bool has_avr_eyes_dist_thld() const;
  inline void clear_avr_eyes_dist_thld();
  static const int kAvrEyesDistThldFieldNumber = 7;
  inline float avr_eyes_dist_thld() const;
  inline void set_avr_eyes_dist_thld(float value);

  // optional .DMSFrameProtocol.Point avr_l_eye_point = 8;
  inline bool has_avr_l_eye_point() const;
  inline void clear_avr_l_eye_point();
  static const int kAvrLEyePointFieldNumber = 8;
  inline const ::DMSFrameProtocol::Point &avr_l_eye_point() const;
  inline ::DMSFrameProtocol::Point *mutable_avr_l_eye_point();
  inline ::DMSFrameProtocol::Point *release_avr_l_eye_point();
  inline void set_allocated_avr_l_eye_point(
      ::DMSFrameProtocol::Point *avr_l_eye_point);

  // optional .DMSFrameProtocol.Point avr_r_eye_point = 9;
  inline bool has_avr_r_eye_point() const;
  inline void clear_avr_r_eye_point();
  static const int kAvrREyePointFieldNumber = 9;
  inline const ::DMSFrameProtocol::Point &avr_r_eye_point() const;
  inline ::DMSFrameProtocol::Point *mutable_avr_r_eye_point();
  inline ::DMSFrameProtocol::Point *release_avr_r_eye_point();
  inline void set_allocated_avr_r_eye_point(
      ::DMSFrameProtocol::Point *avr_r_eye_point);

  // optional float avr_nose_leye_dist = 10;
  inline bool has_avr_nose_leye_dist() const;
  inline void clear_avr_nose_leye_dist();
  static const int kAvrNoseLeyeDistFieldNumber = 10;
  inline float avr_nose_leye_dist() const;
  inline void set_avr_nose_leye_dist(float value);

  // optional float avr_nose_reye_dist = 11;
  inline bool has_avr_nose_reye_dist() const;
  inline void clear_avr_nose_reye_dist();
  static const int kAvrNoseReyeDistFieldNumber = 11;
  inline float avr_nose_reye_dist() const;
  inline void set_avr_nose_reye_dist(float value);

  // optional .DMSFrameProtocol.Point avr_nose_point = 12;
  inline bool has_avr_nose_point() const;
  inline void clear_avr_nose_point();
  static const int kAvrNosePointFieldNumber = 12;
  inline const ::DMSFrameProtocol::Point &avr_nose_point() const;
  inline ::DMSFrameProtocol::Point *mutable_avr_nose_point();
  inline ::DMSFrameProtocol::Point *release_avr_nose_point();
  inline void set_allocated_avr_nose_point(
      ::DMSFrameProtocol::Point *avr_nose_point);

  // optional float avr_nose_rl_ratio = 13;
  inline bool has_avr_nose_rl_ratio() const;
  inline void clear_avr_nose_rl_ratio();
  static const int kAvrNoseRlRatioFieldNumber = 13;
  inline float avr_nose_rl_ratio() const;
  inline void set_avr_nose_rl_ratio(float value);

  // optional float avr_nose_rl_ratio_thld = 14;
  inline bool has_avr_nose_rl_ratio_thld() const;
  inline void clear_avr_nose_rl_ratio_thld();
  static const int kAvrNoseRlRatioThldFieldNumber = 14;
  inline float avr_nose_rl_ratio_thld() const;
  inline void set_avr_nose_rl_ratio_thld(float value);

  // optional .DMSFrameProtocol.Point archor_nose_point = 15;
  inline bool has_archor_nose_point() const;
  inline void clear_archor_nose_point();
  static const int kArchorNosePointFieldNumber = 15;
  inline const ::DMSFrameProtocol::Point &archor_nose_point() const;
  inline ::DMSFrameProtocol::Point *mutable_archor_nose_point();
  inline ::DMSFrameProtocol::Point *release_archor_nose_point();
  inline void set_allocated_archor_nose_point(
      ::DMSFrameProtocol::Point *archor_nose_point);

  // optional float devi_nose_dist_x = 16;
  inline bool has_devi_nose_dist_x() const;
  inline void clear_devi_nose_dist_x();
  static const int kDeviNoseDistXFieldNumber = 16;
  inline float devi_nose_dist_x() const;
  inline void set_devi_nose_dist_x(float value);

  // optional float devi_nose_dist_y = 17;
  inline bool has_devi_nose_dist_y() const;
  inline void clear_devi_nose_dist_y();
  static const int kDeviNoseDistYFieldNumber = 17;
  inline float devi_nose_dist_y() const;
  inline void set_devi_nose_dist_y(float value);

  // optional float devi_nose_dist_x_thld = 18;
  inline bool has_devi_nose_dist_x_thld() const;
  inline void clear_devi_nose_dist_x_thld();
  static const int kDeviNoseDistXThldFieldNumber = 18;
  inline float devi_nose_dist_x_thld() const;
  inline void set_devi_nose_dist_x_thld(float value);

  // optional float vari_nose_posi_x = 19;
  inline bool has_vari_nose_posi_x() const;
  inline void clear_vari_nose_posi_x();
  static const int kVariNosePosiXFieldNumber = 19;
  inline float vari_nose_posi_x() const;
  inline void set_vari_nose_posi_x(float value);

  // optional float vari_nose_posi_y = 20;
  inline bool has_vari_nose_posi_y() const;
  inline void clear_vari_nose_posi_y();
  static const int kVariNosePosiYFieldNumber = 20;
  inline float vari_nose_posi_y() const;
  inline void set_vari_nose_posi_y(float value);

  // optional float vari_nose_posi_x_thld = 21;
  inline bool has_vari_nose_posi_x_thld() const;
  inline void clear_vari_nose_posi_x_thld();
  static const int kVariNosePosiXThldFieldNumber = 21;
  inline float vari_nose_posi_x_thld() const;
  inline void set_vari_nose_posi_x_thld(float value);

  // optional float vari_nose_posi_y_thld = 22;
  inline bool has_vari_nose_posi_y_thld() const;
  inline void clear_vari_nose_posi_y_thld();
  static const int kVariNosePosiYThldFieldNumber = 22;
  inline float vari_nose_posi_y_thld() const;
  inline void set_vari_nose_posi_y_thld(float value);

  // optional float devi_nose_dist_y_thld = 23;
  inline bool has_devi_nose_dist_y_thld() const;
  inline void clear_devi_nose_dist_y_thld();
  static const int kDeviNoseDistYThldFieldNumber = 23;
  inline float devi_nose_dist_y_thld() const;
  inline void set_devi_nose_dist_y_thld(float value);

  // optional float avr_rn_rl_ratio = 24;
  inline bool has_avr_rn_rl_ratio() const;
  inline void clear_avr_rn_rl_ratio();
  static const int kAvrRnRlRatioFieldNumber = 24;
  inline float avr_rn_rl_ratio() const;
  inline void set_avr_rn_rl_ratio(float value);

  // optional float avr_ln_rl_ratio = 25;
  inline bool has_avr_ln_rl_ratio() const;
  inline void clear_avr_ln_rl_ratio();
  static const int kAvrLnRlRatioFieldNumber = 25;
  inline float avr_ln_rl_ratio() const;
  inline void set_avr_ln_rl_ratio(float value);

  // optional float cur_rn_rl_ratio = 26;
  inline bool has_cur_rn_rl_ratio() const;
  inline void clear_cur_rn_rl_ratio();
  static const int kCurRnRlRatioFieldNumber = 26;
  inline float cur_rn_rl_ratio() const;
  inline void set_cur_rn_rl_ratio(float value);

  // optional float cur_ln_rl_ratio = 27;
  inline bool has_cur_ln_rl_ratio() const;
  inline void clear_cur_ln_rl_ratio();
  static const int kCurLnRlRatioFieldNumber = 27;
  inline float cur_ln_rl_ratio() const;
  inline void set_cur_ln_rl_ratio(float value);

  // optional float cur_nose_rl_ratio = 28;
  inline bool has_cur_nose_rl_ratio() const;
  inline void clear_cur_nose_rl_ratio();
  static const int kCurNoseRlRatioFieldNumber = 28;
  inline float cur_nose_rl_ratio() const;
  inline void set_cur_nose_rl_ratio(float value);

  // optional float cur_nose_rl_ratio_side_thld = 29;
  inline bool has_cur_nose_rl_ratio_side_thld() const;
  inline void clear_cur_nose_rl_ratio_side_thld();
  static const int kCurNoseRlRatioSideThldFieldNumber = 29;
  inline float cur_nose_rl_ratio_side_thld() const;
  inline void set_cur_nose_rl_ratio_side_thld(float value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.PolicyParams)
 private:
  inline void set_has_r_eye_gradient();
  inline void clear_has_r_eye_gradient();
  inline void set_has_l_eye_gradient();
  inline void clear_has_l_eye_gradient();
  inline void set_has_eye_gradient_thld();
  inline void clear_has_eye_gradient_thld();
  inline void set_has_avr_r_eye_close();
  inline void clear_has_avr_r_eye_close();
  inline void set_has_avr_l_eye_close();
  inline void clear_has_avr_l_eye_close();
  inline void set_has_avr_eyes_dist();
  inline void clear_has_avr_eyes_dist();
  inline void set_has_avr_eyes_dist_thld();
  inline void clear_has_avr_eyes_dist_thld();
  inline void set_has_avr_l_eye_point();
  inline void clear_has_avr_l_eye_point();
  inline void set_has_avr_r_eye_point();
  inline void clear_has_avr_r_eye_point();
  inline void set_has_avr_nose_leye_dist();
  inline void clear_has_avr_nose_leye_dist();
  inline void set_has_avr_nose_reye_dist();
  inline void clear_has_avr_nose_reye_dist();
  inline void set_has_avr_nose_point();
  inline void clear_has_avr_nose_point();
  inline void set_has_avr_nose_rl_ratio();
  inline void clear_has_avr_nose_rl_ratio();
  inline void set_has_avr_nose_rl_ratio_thld();
  inline void clear_has_avr_nose_rl_ratio_thld();
  inline void set_has_archor_nose_point();
  inline void clear_has_archor_nose_point();
  inline void set_has_devi_nose_dist_x();
  inline void clear_has_devi_nose_dist_x();
  inline void set_has_devi_nose_dist_y();
  inline void clear_has_devi_nose_dist_y();
  inline void set_has_devi_nose_dist_x_thld();
  inline void clear_has_devi_nose_dist_x_thld();
  inline void set_has_vari_nose_posi_x();
  inline void clear_has_vari_nose_posi_x();
  inline void set_has_vari_nose_posi_y();
  inline void clear_has_vari_nose_posi_y();
  inline void set_has_vari_nose_posi_x_thld();
  inline void clear_has_vari_nose_posi_x_thld();
  inline void set_has_vari_nose_posi_y_thld();
  inline void clear_has_vari_nose_posi_y_thld();
  inline void set_has_devi_nose_dist_y_thld();
  inline void clear_has_devi_nose_dist_y_thld();
  inline void set_has_avr_rn_rl_ratio();
  inline void clear_has_avr_rn_rl_ratio();
  inline void set_has_avr_ln_rl_ratio();
  inline void clear_has_avr_ln_rl_ratio();
  inline void set_has_cur_rn_rl_ratio();
  inline void clear_has_cur_rn_rl_ratio();
  inline void set_has_cur_ln_rl_ratio();
  inline void clear_has_cur_ln_rl_ratio();
  inline void set_has_cur_nose_rl_ratio();
  inline void clear_has_cur_nose_rl_ratio();
  inline void set_has_cur_nose_rl_ratio_side_thld();
  inline void clear_has_cur_nose_rl_ratio_side_thld();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float r_eye_gradient_;
  float l_eye_gradient_;
  float eye_gradient_thld_;
  float avr_r_eye_close_;
  float avr_l_eye_close_;
  float avr_eyes_dist_;
  ::DMSFrameProtocol::Point *avr_l_eye_point_;
  float avr_eyes_dist_thld_;
  float avr_nose_leye_dist_;
  ::DMSFrameProtocol::Point *avr_r_eye_point_;
  ::DMSFrameProtocol::Point *avr_nose_point_;
  float avr_nose_reye_dist_;
  float avr_nose_rl_ratio_;
  ::DMSFrameProtocol::Point *archor_nose_point_;
  float avr_nose_rl_ratio_thld_;
  float devi_nose_dist_x_;
  float devi_nose_dist_y_;
  float devi_nose_dist_x_thld_;
  float vari_nose_posi_x_;
  float vari_nose_posi_y_;
  float vari_nose_posi_x_thld_;
  float vari_nose_posi_y_thld_;
  float devi_nose_dist_y_thld_;
  float avr_rn_rl_ratio_;
  float avr_ln_rl_ratio_;
  float cur_rn_rl_ratio_;
  float cur_ln_rl_ratio_;
  float cur_nose_rl_ratio_;
  float cur_nose_rl_ratio_side_thld_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static PolicyParams *default_instance_;
};
// -------------------------------------------------------------------

class MonitorResult : public ::google::protobuf::Message {
 public:
  MonitorResult();
  virtual ~MonitorResult();

  MonitorResult(const MonitorResult &from);

  inline MonitorResult &operator=(const MonitorResult &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const MonitorResult &default_instance();

  void Swap(MonitorResult *other);

  // implements Message ----------------------------------------------

  MonitorResult *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const MonitorResult &from);
  void MergeFrom(const MonitorResult &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DMSFrameProtocol.WarnState warn_state = 1;
  inline bool has_warn_state() const;
  inline void clear_warn_state();
  static const int kWarnStateFieldNumber = 1;
  inline ::DMSFrameProtocol::WarnState warn_state() const;
  inline void set_warn_state(::DMSFrameProtocol::WarnState value);

  // required int64 dur_time = 2;
  inline bool has_dur_time() const;
  inline void clear_dur_time();
  static const int kDurTimeFieldNumber = 2;
  inline ::google::protobuf::int64 dur_time() const;
  inline void set_dur_time(::google::protobuf::int64 value);

  // optional .DMSFrameProtocol.PolicyParams policy_params = 3;
  inline bool has_policy_params() const;
  inline void clear_policy_params();
  static const int kPolicyParamsFieldNumber = 3;
  inline const ::DMSFrameProtocol::PolicyParams &policy_params() const;
  inline ::DMSFrameProtocol::PolicyParams *mutable_policy_params();
  inline ::DMSFrameProtocol::PolicyParams *release_policy_params();
  inline void set_allocated_policy_params(
      ::DMSFrameProtocol::PolicyParams *policy_params);

  // optional .DMSFrameProtocol.FaceDir face_dir = 4;
  inline bool has_face_dir() const;
  inline void clear_face_dir();
  static const int kFaceDirFieldNumber = 4;
  inline ::DMSFrameProtocol::FaceDir face_dir() const;
  inline void set_face_dir(::DMSFrameProtocol::FaceDir value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.MonitorResult)
 private:
  inline void set_has_warn_state();
  inline void clear_has_warn_state();
  inline void set_has_dur_time();
  inline void clear_has_dur_time();
  inline void set_has_policy_params();
  inline void clear_has_policy_params();
  inline void set_has_face_dir();
  inline void clear_has_face_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 dur_time_;
  int warn_state_;
  int face_dir_;
  ::DMSFrameProtocol::PolicyParams *policy_params_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static MonitorResult *default_instance_;
};
// -------------------------------------------------------------------

class FaceRecogResult : public ::google::protobuf::Message {
 public:
  FaceRecogResult();
  virtual ~FaceRecogResult();

  FaceRecogResult(const FaceRecogResult &from);

  inline FaceRecogResult &operator=(const FaceRecogResult &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const FaceRecogResult &default_instance();

  void Swap(FaceRecogResult *other);

  // implements Message ----------------------------------------------

  FaceRecogResult *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const FaceRecogResult &from);
  void MergeFrom(const FaceRecogResult &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 persion_id = 1;
  inline bool has_persion_id() const;
  inline void clear_persion_id();
  static const int kPersionIdFieldNumber = 1;
  inline ::google::protobuf::int32 persion_id() const;
  inline void set_persion_id(::google::protobuf::int32 value);

  // optional string persion_name = 2;
  inline bool has_persion_name() const;
  inline void clear_persion_name();
  static const int kPersionNameFieldNumber = 2;
  inline const ::std::string &persion_name() const;
  inline void set_persion_name(const ::std::string &value);
  inline void set_persion_name(const char *value);
  inline void set_persion_name(const char *value, size_t size);
  inline ::std::string *mutable_persion_name();
  inline ::std::string *release_persion_name();
  inline void set_allocated_persion_name(::std::string *persion_name);

  // optional int64 persion_timestamp = 3;
  inline bool has_persion_timestamp() const;
  inline void clear_persion_timestamp();
  static const int kPersionTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 persion_timestamp() const;
  inline void set_persion_timestamp(::google::protobuf::int64 value);

  // optional int32 persion_frame_id = 4;
  inline bool has_persion_frame_id() const;
  inline void clear_persion_frame_id();
  static const int kPersionFrameIdFieldNumber = 4;
  inline ::google::protobuf::int32 persion_frame_id() const;
  inline void set_persion_frame_id(::google::protobuf::int32 value);

  // optional .DMSFrameProtocol.Rect_i persion_detect_ROI = 5;
  inline bool has_persion_detect_roi() const;
  inline void clear_persion_detect_roi();
  static const int kPersionDetectROIFieldNumber = 5;
  inline const ::DMSFrameProtocol::Rect_i &persion_detect_roi() const;
  inline ::DMSFrameProtocol::Rect_i *mutable_persion_detect_roi();
  inline ::DMSFrameProtocol::Rect_i *release_persion_detect_roi();
  inline void set_allocated_persion_detect_roi(
      ::DMSFrameProtocol::Rect_i *persion_detect_roi);

  // optional .DMSFrameProtocol.Rect_i persion_result_ROI = 6;
  inline bool has_persion_result_roi() const;
  inline void clear_persion_result_roi();
  static const int kPersionResultROIFieldNumber = 6;
  inline const ::DMSFrameProtocol::Rect_i &persion_result_roi() const;
  inline ::DMSFrameProtocol::Rect_i *mutable_persion_result_roi();
  inline ::DMSFrameProtocol::Rect_i *release_persion_result_roi();
  inline void set_allocated_persion_result_roi(
      ::DMSFrameProtocol::Rect_i *persion_result_roi);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.FaceRecogResult)
 private:
  inline void set_has_persion_id();
  inline void clear_has_persion_id();
  inline void set_has_persion_name();
  inline void clear_has_persion_name();
  inline void set_has_persion_timestamp();
  inline void clear_has_persion_timestamp();
  inline void set_has_persion_frame_id();
  inline void clear_has_persion_frame_id();
  inline void set_has_persion_detect_roi();
  inline void clear_has_persion_detect_roi();
  inline void set_has_persion_result_roi();
  inline void clear_has_persion_result_roi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string *persion_name_;
  ::google::protobuf::int32 persion_id_;
  ::google::protobuf::int32 persion_frame_id_;
  ::google::protobuf::int64 persion_timestamp_;
  ::DMSFrameProtocol::Rect_i *persion_detect_roi_;
  ::DMSFrameProtocol::Rect_i *persion_result_roi_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static FaceRecogResult *default_instance_;
};
// -------------------------------------------------------------------

class CANInfo : public ::google::protobuf::Message {
 public:
  CANInfo();
  virtual ~CANInfo();

  CANInfo(const CANInfo &from);

  inline CANInfo &operator=(const CANInfo &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const CANInfo &default_instance();

  void Swap(CANInfo *other);

  // implements Message ----------------------------------------------

  CANInfo *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const CANInfo &from);
  void MergeFrom(const CANInfo &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Angle = 1;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 1;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);

  // optional int32 Direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline ::google::protobuf::int32 direction() const;
  inline void set_direction(::google::protobuf::int32 value);

  // optional int32 Gears = 3;
  inline bool has_gears() const;
  inline void clear_gears();
  static const int kGearsFieldNumber = 3;
  inline ::google::protobuf::int32 gears() const;
  inline void set_gears(::google::protobuf::int32 value);

  // optional int32 Speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // optional int64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.CANInfo)
 private:
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_gears();
  inline void clear_has_gears();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 angle_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 gears_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int64 timestamp_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static CANInfo *default_instance_;
};
// -------------------------------------------------------------------

class ImageInfo : public ::google::protobuf::Message {
 public:
  ImageInfo();
  virtual ~ImageInfo();

  ImageInfo(const ImageInfo &from);

  inline ImageInfo &operator=(const ImageInfo &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const ImageInfo &default_instance();

  void Swap(ImageInfo *other);

  // implements Message ----------------------------------------------

  ImageInfo *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const ImageInfo &from);
  void MergeFrom(const ImageInfo &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required int32 width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // required int32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required int32 format = 4;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 4;
  inline ::google::protobuf::int32 format() const;
  inline void set_format(::google::protobuf::int32 value);

  // required int32 luma = 5;
  inline bool has_luma() const;
  inline void clear_luma();
  static const int kLumaFieldNumber = 5;
  inline ::google::protobuf::int32 luma() const;
  inline void set_luma(::google::protobuf::int32 value);

  // optional int32 img_id = 6;
  inline bool has_img_id() const;
  inline void clear_img_id();
  static const int kImgIdFieldNumber = 6;
  inline ::google::protobuf::int32 img_id() const;
  inline void set_img_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.ImageInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_luma();
  inline void clear_has_luma();
  inline void set_has_img_id();
  inline void clear_has_img_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 format_;
  ::google::protobuf::int32 luma_;
  ::google::protobuf::int32 img_id_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static ImageInfo *default_instance_;
};
// -------------------------------------------------------------------

class DMSFrame : public ::google::protobuf::Message {
 public:
  DMSFrame();
  virtual ~DMSFrame();

  DMSFrame(const DMSFrame &from);

  inline DMSFrame &operator=(const DMSFrame &from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor *descriptor();
  static const DMSFrame &default_instance();

  void Swap(DMSFrame *other);

  // implements Message ----------------------------------------------

  DMSFrame *New() const;
  void CopyFrom(const ::google::protobuf::Message &from);
  void MergeFrom(const ::google::protobuf::Message &from);
  void CopyFrom(const DMSFrame &from);
  void MergeFrom(const DMSFrame &from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream *input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream *output) const;
  ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(
      ::google::protobuf::uint8 *output) const;
  int GetCachedSize() const { return _cached_size_; }

 private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;

 public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 frame_id = 1;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  inline ::google::protobuf::int32 frame_id() const;
  inline void set_frame_id(::google::protobuf::int32 value);

  // optional .DMSFrameProtocol.ImageInfo image = 2;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 2;
  inline const ::DMSFrameProtocol::ImageInfo &image() const;
  inline ::DMSFrameProtocol::ImageInfo *mutable_image();
  inline ::DMSFrameProtocol::ImageInfo *release_image();
  inline void set_allocated_image(::DMSFrameProtocol::ImageInfo *image);

  // optional .DMSFrameProtocol.AlgoResult algo_result = 3;
  inline bool has_algo_result() const;
  inline void clear_algo_result();
  static const int kAlgoResultFieldNumber = 3;
  inline const ::DMSFrameProtocol::AlgoResult &algo_result() const;
  inline ::DMSFrameProtocol::AlgoResult *mutable_algo_result();
  inline ::DMSFrameProtocol::AlgoResult *release_algo_result();
  inline void set_allocated_algo_result(
      ::DMSFrameProtocol::AlgoResult *algo_result);

  // optional .DMSFrameProtocol.MonitorResult monitor_result = 4;
  inline bool has_monitor_result() const;
  inline void clear_monitor_result();
  static const int kMonitorResultFieldNumber = 4;
  inline const ::DMSFrameProtocol::MonitorResult &monitor_result() const;
  inline ::DMSFrameProtocol::MonitorResult *mutable_monitor_result();
  inline ::DMSFrameProtocol::MonitorResult *release_monitor_result();
  inline void set_allocated_monitor_result(
      ::DMSFrameProtocol::MonitorResult *monitor_result);

  // repeated .DMSFrameProtocol.CANInfo can_info = 5;
  inline int can_info_size() const;
  inline void clear_can_info();
  static const int kCanInfoFieldNumber = 5;
  inline const ::DMSFrameProtocol::CANInfo &can_info(int index) const;
  inline ::DMSFrameProtocol::CANInfo *mutable_can_info(int index);
  inline ::DMSFrameProtocol::CANInfo *add_can_info();
  inline const ::google::protobuf::RepeatedPtrField<
      ::DMSFrameProtocol::CANInfo>
      &can_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::CANInfo>
      *mutable_can_info();

  // optional bool seek_flag = 6 [default = false];
  inline bool has_seek_flag() const;
  inline void clear_seek_flag();
  static const int kSeekFlagFieldNumber = 6;
  inline bool seek_flag() const;
  inline void set_seek_flag(bool value);

  // optional .DMSFrameProtocol.FaceRecogResult facerecog_result = 7;
  inline bool has_facerecog_result() const;
  inline void clear_facerecog_result();
  static const int kFacerecogResultFieldNumber = 7;
  inline const ::DMSFrameProtocol::FaceRecogResult &facerecog_result() const;
  inline ::DMSFrameProtocol::FaceRecogResult *mutable_facerecog_result();
  inline ::DMSFrameProtocol::FaceRecogResult *release_facerecog_result();
  inline void set_allocated_facerecog_result(
      ::DMSFrameProtocol::FaceRecogResult *facerecog_result);

  // @@protoc_insertion_point(class_scope:DMSFrameProtocol.DMSFrame)
 private:
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_algo_result();
  inline void clear_has_algo_result();
  inline void set_has_monitor_result();
  inline void clear_has_monitor_result();
  inline void set_has_seek_flag();
  inline void clear_has_seek_flag();
  inline void set_has_facerecog_result();
  inline void clear_has_facerecog_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DMSFrameProtocol::ImageInfo *image_;
  ::DMSFrameProtocol::AlgoResult *algo_result_;
  ::google::protobuf::int32 frame_id_;
  bool seek_flag_;
  ::DMSFrameProtocol::MonitorResult *monitor_result_;
  ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::CANInfo> can_info_;
  ::DMSFrameProtocol::FaceRecogResult *facerecog_result_;
  friend void protobuf_AddDesc_DMSFrame_2eproto();
  friend void protobuf_AssignDesc_DMSFrame_2eproto();
  friend void protobuf_ShutdownFile_DMSFrame_2eproto();

  void InitAsDefaultInstance();
  static DMSFrame *default_instance_;
};
// ===================================================================

// ===================================================================

// Rect

// required float left = 1;
inline bool Rect::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::set_has_left() { _has_bits_[0] |= 0x00000001u; }
inline void Rect::clear_has_left() { _has_bits_[0] &= ~0x00000001u; }
inline void Rect::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline float Rect::left() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect.left)
  return left_;
}
inline void Rect::set_left(float value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect.left)
}

// required float right = 2;
inline bool Rect::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::set_has_right() { _has_bits_[0] |= 0x00000002u; }
inline void Rect::clear_has_right() { _has_bits_[0] &= ~0x00000002u; }
inline void Rect::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline float Rect::right() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect.right)
  return right_;
}
inline void Rect::set_right(float value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect.right)
}

// required float top = 3;
inline bool Rect::has_top() const { return (_has_bits_[0] & 0x00000004u) != 0; }
inline void Rect::set_has_top() { _has_bits_[0] |= 0x00000004u; }
inline void Rect::clear_has_top() { _has_bits_[0] &= ~0x00000004u; }
inline void Rect::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline float Rect::top() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect.top)
  return top_;
}
inline void Rect::set_top(float value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect.top)
}

// required float bottom = 4;
inline bool Rect::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rect::set_has_bottom() { _has_bits_[0] |= 0x00000008u; }
inline void Rect::clear_has_bottom() { _has_bits_[0] &= ~0x00000008u; }
inline void Rect::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline float Rect::bottom() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect.bottom)
  return bottom_;
}
inline void Rect::set_bottom(float value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect.bottom)
}

// -------------------------------------------------------------------

// Rect_i

// required int32 left = 1;
inline bool Rect_i::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect_i::set_has_left() { _has_bits_[0] |= 0x00000001u; }
inline void Rect_i::clear_has_left() { _has_bits_[0] &= ~0x00000001u; }
inline void Rect_i::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 Rect_i::left() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect_i.left)
  return left_;
}
inline void Rect_i::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect_i.left)
}

// required int32 right = 2;
inline bool Rect_i::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect_i::set_has_right() { _has_bits_[0] |= 0x00000002u; }
inline void Rect_i::clear_has_right() { _has_bits_[0] &= ~0x00000002u; }
inline void Rect_i::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 Rect_i::right() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect_i.right)
  return right_;
}
inline void Rect_i::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect_i.right)
}

// required int32 top = 3;
inline bool Rect_i::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rect_i::set_has_top() { _has_bits_[0] |= 0x00000004u; }
inline void Rect_i::clear_has_top() { _has_bits_[0] &= ~0x00000004u; }
inline void Rect_i::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 Rect_i::top() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect_i.top)
  return top_;
}
inline void Rect_i::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect_i.top)
}

// required int32 bottom = 4;
inline bool Rect_i::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rect_i::set_has_bottom() { _has_bits_[0] |= 0x00000008u; }
inline void Rect_i::clear_has_bottom() { _has_bits_[0] &= ~0x00000008u; }
inline void Rect_i::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline ::google::protobuf::int32 Rect_i::bottom() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Rect_i.bottom)
  return bottom_;
}
inline void Rect_i::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Rect_i.bottom)
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::has_x() const { return (_has_bits_[0] & 0x00000001u) != 0; }
inline void Point::set_has_x() { _has_bits_[0] |= 0x00000001u; }
inline void Point::clear_has_x() { _has_bits_[0] &= ~0x00000001u; }
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Point.x)
}

// required float y = 2;
inline bool Point::has_y() const { return (_has_bits_[0] & 0x00000002u) != 0; }
inline void Point::set_has_y() { _has_bits_[0] |= 0x00000002u; }
inline void Point::clear_has_y() { _has_bits_[0] &= ~0x00000002u; }
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Point.y)
}

// -------------------------------------------------------------------

// Face

// required .DMSFrameProtocol.Rect ROI = 1;
inline bool Face::has_roi() const { return (_has_bits_[0] & 0x00000001u) != 0; }
inline void Face::set_has_roi() { _has_bits_[0] |= 0x00000001u; }
inline void Face::clear_has_roi() { _has_bits_[0] &= ~0x00000001u; }
inline void Face::clear_roi() {
  if (roi_ != NULL)
    roi_->::DMSFrameProtocol::Rect::Clear();
  clear_has_roi();
}
inline const ::DMSFrameProtocol::Rect &Face::roi() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Face.ROI)
  return roi_ != NULL ? *roi_ : *default_instance_->roi_;
}
inline ::DMSFrameProtocol::Rect *Face::mutable_roi() {
  set_has_roi();
  if (roi_ == NULL)
    roi_ = new ::DMSFrameProtocol::Rect;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.Face.ROI)
  return roi_;
}
inline ::DMSFrameProtocol::Rect *Face::release_roi() {
  clear_has_roi();
  ::DMSFrameProtocol::Rect *temp = roi_;
  roi_ = NULL;
  return temp;
}
inline void Face::set_allocated_roi(::DMSFrameProtocol::Rect *roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    set_has_roi();
  } else {
    clear_has_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.Face.ROI)
}

// required float score = 2;
inline bool Face::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Face::set_has_score() { _has_bits_[0] |= 0x00000002u; }
inline void Face::clear_has_score() { _has_bits_[0] &= ~0x00000002u; }
inline void Face::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float Face::score() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Face.score)
  return score_;
}
inline void Face::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Face.score)
}

// -------------------------------------------------------------------

// LandMark21

// repeated .DMSFrameProtocol.Point LDMK = 1;
inline int LandMark21::ldmk_size() const { return ldmk_.size(); }
inline void LandMark21::clear_ldmk() { ldmk_.Clear(); }
inline const ::DMSFrameProtocol::Point &LandMark21::ldmk(int index) const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.LandMark21.LDMK)
  return ldmk_.Get(index);
}
inline ::DMSFrameProtocol::Point *LandMark21::mutable_ldmk(int index) {
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.LandMark21.LDMK)
  return ldmk_.Mutable(index);
}
inline ::DMSFrameProtocol::Point *LandMark21::add_ldmk() {
  // @@protoc_insertion_point(field_add:DMSFrameProtocol.LandMark21.LDMK)
  return ldmk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Point>
    &LandMark21::ldmk() const {
  // @@protoc_insertion_point(field_list:DMSFrameProtocol.LandMark21.LDMK)
  return ldmk_;
}
inline ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Point>
    *LandMark21::mutable_ldmk() {
  // @@protoc_insertion_point(field_mutable_list:DMSFrameProtocol.LandMark21.LDMK)
  return &ldmk_;
}

// repeated float score = 2;
inline int LandMark21::score_size() const { return score_.size(); }
inline void LandMark21::clear_score() { score_.Clear(); }
inline float LandMark21::score(int index) const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.LandMark21.score)
  return score_.Get(index);
}
inline void LandMark21::set_score(int index, float value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.LandMark21.score)
}
inline void LandMark21::add_score(float value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:DMSFrameProtocol.LandMark21.score)
}
inline const ::google::protobuf::RepeatedField<float> &LandMark21::score()
    const {
  // @@protoc_insertion_point(field_list:DMSFrameProtocol.LandMark21.score)
  return score_;
}
inline ::google::protobuf::RepeatedField<float> *LandMark21::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:DMSFrameProtocol.LandMark21.score)
  return &score_;
}

// -------------------------------------------------------------------

// Eye

// required .DMSFrameProtocol.Rect ROI = 1;
inline bool Eye::has_roi() const { return (_has_bits_[0] & 0x00000001u) != 0; }
inline void Eye::set_has_roi() { _has_bits_[0] |= 0x00000001u; }
inline void Eye::clear_has_roi() { _has_bits_[0] &= ~0x00000001u; }
inline void Eye::clear_roi() {
  if (roi_ != NULL)
    roi_->::DMSFrameProtocol::Rect::Clear();
  clear_has_roi();
}
inline const ::DMSFrameProtocol::Rect &Eye::roi() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Eye.ROI)
  return roi_ != NULL ? *roi_ : *default_instance_->roi_;
}
inline ::DMSFrameProtocol::Rect *Eye::mutable_roi() {
  set_has_roi();
  if (roi_ == NULL)
    roi_ = new ::DMSFrameProtocol::Rect;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.Eye.ROI)
  return roi_;
}
inline ::DMSFrameProtocol::Rect *Eye::release_roi() {
  clear_has_roi();
  ::DMSFrameProtocol::Rect *temp = roi_;
  roi_ = NULL;
  return temp;
}
inline void Eye::set_allocated_roi(::DMSFrameProtocol::Rect *roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    set_has_roi();
  } else {
    clear_has_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.Eye.ROI)
}

// required int32 status = 2;
inline bool Eye::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Eye::set_has_status() { _has_bits_[0] |= 0x00000002u; }
inline void Eye::clear_has_status() { _has_bits_[0] &= ~0x00000002u; }
inline void Eye::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Eye::status() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Eye.status)
  return status_;
}
inline void Eye::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Eye.status)
}

// required float open_score = 3;
inline bool Eye::has_open_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Eye::set_has_open_score() { _has_bits_[0] |= 0x00000004u; }
inline void Eye::clear_has_open_score() { _has_bits_[0] &= ~0x00000004u; }
inline void Eye::clear_open_score() {
  open_score_ = 0;
  clear_has_open_score();
}
inline float Eye::open_score() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Eye.open_score)
  return open_score_;
}
inline void Eye::set_open_score(float value) {
  set_has_open_score();
  open_score_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Eye.open_score)
}

// required float close_score = 4;
inline bool Eye::has_close_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Eye::set_has_close_score() { _has_bits_[0] |= 0x00000008u; }
inline void Eye::clear_has_close_score() { _has_bits_[0] &= ~0x00000008u; }
inline void Eye::clear_close_score() {
  close_score_ = 0;
  clear_has_close_score();
}
inline float Eye::close_score() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Eye.close_score)
  return close_score_;
}
inline void Eye::set_close_score(float value) {
  set_has_close_score();
  close_score_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.Eye.close_score)
}

// -------------------------------------------------------------------

// Eyes

// required .DMSFrameProtocol.Eye left = 1;
inline bool Eyes::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Eyes::set_has_left() { _has_bits_[0] |= 0x00000001u; }
inline void Eyes::clear_has_left() { _has_bits_[0] &= ~0x00000001u; }
inline void Eyes::clear_left() {
  if (left_ != NULL)
    left_->::DMSFrameProtocol::Eye::Clear();
  clear_has_left();
}
inline const ::DMSFrameProtocol::Eye &Eyes::left() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Eyes.left)
  return left_ != NULL ? *left_ : *default_instance_->left_;
}
inline ::DMSFrameProtocol::Eye *Eyes::mutable_left() {
  set_has_left();
  if (left_ == NULL)
    left_ = new ::DMSFrameProtocol::Eye;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.Eyes.left)
  return left_;
}
inline ::DMSFrameProtocol::Eye *Eyes::release_left() {
  clear_has_left();
  ::DMSFrameProtocol::Eye *temp = left_;
  left_ = NULL;
  return temp;
}
inline void Eyes::set_allocated_left(::DMSFrameProtocol::Eye *left) {
  delete left_;
  left_ = left;
  if (left) {
    set_has_left();
  } else {
    clear_has_left();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.Eyes.left)
}

// required .DMSFrameProtocol.Eye right = 2;
inline bool Eyes::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Eyes::set_has_right() { _has_bits_[0] |= 0x00000002u; }
inline void Eyes::clear_has_right() { _has_bits_[0] &= ~0x00000002u; }
inline void Eyes::clear_right() {
  if (right_ != NULL)
    right_->::DMSFrameProtocol::Eye::Clear();
  clear_has_right();
}
inline const ::DMSFrameProtocol::Eye &Eyes::right() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.Eyes.right)
  return right_ != NULL ? *right_ : *default_instance_->right_;
}
inline ::DMSFrameProtocol::Eye *Eyes::mutable_right() {
  set_has_right();
  if (right_ == NULL)
    right_ = new ::DMSFrameProtocol::Eye;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.Eyes.right)
  return right_;
}
inline ::DMSFrameProtocol::Eye *Eyes::release_right() {
  clear_has_right();
  ::DMSFrameProtocol::Eye *temp = right_;
  right_ = NULL;
  return temp;
}
inline void Eyes::set_allocated_right(::DMSFrameProtocol::Eye *right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.Eyes.right)
}

// -------------------------------------------------------------------

// AlgoResult

// repeated .DMSFrameProtocol.Face face_original_ROIs = 1;
inline int AlgoResult::face_original_rois_size() const {
  return face_original_rois_.size();
}
inline void AlgoResult::clear_face_original_rois() {
  face_original_rois_.Clear();
}
inline const ::DMSFrameProtocol::Face &AlgoResult::face_original_rois(
    int index) const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.AlgoResult.face_original_ROIs)
  return face_original_rois_.Get(index);
}
inline ::DMSFrameProtocol::Face *AlgoResult::mutable_face_original_rois(
    int index) {
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.AlgoResult.face_original_ROIs)
  return face_original_rois_.Mutable(index);
}
inline ::DMSFrameProtocol::Face *AlgoResult::add_face_original_rois() {
  // @@protoc_insertion_point(field_add:DMSFrameProtocol.AlgoResult.face_original_ROIs)
  return face_original_rois_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Face>
    &AlgoResult::face_original_rois() const {
  // @@protoc_insertion_point(field_list:DMSFrameProtocol.AlgoResult.face_original_ROIs)
  return face_original_rois_;
}
inline ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::Face>
    *AlgoResult::mutable_face_original_rois() {
  // @@protoc_insertion_point(field_mutable_list:DMSFrameProtocol.AlgoResult.face_original_ROIs)
  return &face_original_rois_;
}

// optional .DMSFrameProtocol.Face face_filtered_ROIs = 2;
inline bool AlgoResult::has_face_filtered_rois() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlgoResult::set_has_face_filtered_rois() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlgoResult::clear_has_face_filtered_rois() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlgoResult::clear_face_filtered_rois() {
  if (face_filtered_rois_ != NULL)
    face_filtered_rois_->::DMSFrameProtocol::Face::Clear();
  clear_has_face_filtered_rois();
}
inline const ::DMSFrameProtocol::Face &AlgoResult::face_filtered_rois() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.AlgoResult.face_filtered_ROIs)
  return face_filtered_rois_ != NULL ? *face_filtered_rois_
                                     : *default_instance_->face_filtered_rois_;
}
inline ::DMSFrameProtocol::Face *AlgoResult::mutable_face_filtered_rois() {
  set_has_face_filtered_rois();
  if (face_filtered_rois_ == NULL)
    face_filtered_rois_ = new ::DMSFrameProtocol::Face;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.AlgoResult.face_filtered_ROIs)
  return face_filtered_rois_;
}
inline ::DMSFrameProtocol::Face *AlgoResult::release_face_filtered_rois() {
  clear_has_face_filtered_rois();
  ::DMSFrameProtocol::Face *temp = face_filtered_rois_;
  face_filtered_rois_ = NULL;
  return temp;
}
inline void AlgoResult::set_allocated_face_filtered_rois(
    ::DMSFrameProtocol::Face *face_filtered_rois) {
  delete face_filtered_rois_;
  face_filtered_rois_ = face_filtered_rois;
  if (face_filtered_rois) {
    set_has_face_filtered_rois();
  } else {
    clear_has_face_filtered_rois();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.AlgoResult.face_filtered_ROIs)
}

// optional .DMSFrameProtocol.LandMark21 landmark = 3;
inline bool AlgoResult::has_landmark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlgoResult::set_has_landmark() { _has_bits_[0] |= 0x00000004u; }
inline void AlgoResult::clear_has_landmark() { _has_bits_[0] &= ~0x00000004u; }
inline void AlgoResult::clear_landmark() {
  if (landmark_ != NULL)
    landmark_->::DMSFrameProtocol::LandMark21::Clear();
  clear_has_landmark();
}
inline const ::DMSFrameProtocol::LandMark21 &AlgoResult::landmark() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.AlgoResult.landmark)
  return landmark_ != NULL ? *landmark_ : *default_instance_->landmark_;
}
inline ::DMSFrameProtocol::LandMark21 *AlgoResult::mutable_landmark() {
  set_has_landmark();
  if (landmark_ == NULL)
    landmark_ = new ::DMSFrameProtocol::LandMark21;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.AlgoResult.landmark)
  return landmark_;
}
inline ::DMSFrameProtocol::LandMark21 *AlgoResult::release_landmark() {
  clear_has_landmark();
  ::DMSFrameProtocol::LandMark21 *temp = landmark_;
  landmark_ = NULL;
  return temp;
}
inline void AlgoResult::set_allocated_landmark(
    ::DMSFrameProtocol::LandMark21 *landmark) {
  delete landmark_;
  landmark_ = landmark;
  if (landmark) {
    set_has_landmark();
  } else {
    clear_has_landmark();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.AlgoResult.landmark)
}

// optional .DMSFrameProtocol.Eyes eyes = 4;
inline bool AlgoResult::has_eyes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlgoResult::set_has_eyes() { _has_bits_[0] |= 0x00000008u; }
inline void AlgoResult::clear_has_eyes() { _has_bits_[0] &= ~0x00000008u; }
inline void AlgoResult::clear_eyes() {
  if (eyes_ != NULL)
    eyes_->::DMSFrameProtocol::Eyes::Clear();
  clear_has_eyes();
}
inline const ::DMSFrameProtocol::Eyes &AlgoResult::eyes() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.AlgoResult.eyes)
  return eyes_ != NULL ? *eyes_ : *default_instance_->eyes_;
}
inline ::DMSFrameProtocol::Eyes *AlgoResult::mutable_eyes() {
  set_has_eyes();
  if (eyes_ == NULL)
    eyes_ = new ::DMSFrameProtocol::Eyes;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.AlgoResult.eyes)
  return eyes_;
}
inline ::DMSFrameProtocol::Eyes *AlgoResult::release_eyes() {
  clear_has_eyes();
  ::DMSFrameProtocol::Eyes *temp = eyes_;
  eyes_ = NULL;
  return temp;
}
inline void AlgoResult::set_allocated_eyes(::DMSFrameProtocol::Eyes *eyes) {
  delete eyes_;
  eyes_ = eyes;
  if (eyes) {
    set_has_eyes();
  } else {
    clear_has_eyes();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.AlgoResult.eyes)
}

// optional .DMSFrameProtocol.Rect face_detect_ROI = 5;
inline bool AlgoResult::has_face_detect_roi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlgoResult::set_has_face_detect_roi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlgoResult::clear_has_face_detect_roi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlgoResult::clear_face_detect_roi() {
  if (face_detect_roi_ != NULL)
    face_detect_roi_->::DMSFrameProtocol::Rect::Clear();
  clear_has_face_detect_roi();
}
inline const ::DMSFrameProtocol::Rect &AlgoResult::face_detect_roi() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.AlgoResult.face_detect_ROI)
  return face_detect_roi_ != NULL ? *face_detect_roi_
                                  : *default_instance_->face_detect_roi_;
}
inline ::DMSFrameProtocol::Rect *AlgoResult::mutable_face_detect_roi() {
  set_has_face_detect_roi();
  if (face_detect_roi_ == NULL)
    face_detect_roi_ = new ::DMSFrameProtocol::Rect;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.AlgoResult.face_detect_ROI)
  return face_detect_roi_;
}
inline ::DMSFrameProtocol::Rect *AlgoResult::release_face_detect_roi() {
  clear_has_face_detect_roi();
  ::DMSFrameProtocol::Rect *temp = face_detect_roi_;
  face_detect_roi_ = NULL;
  return temp;
}
inline void AlgoResult::set_allocated_face_detect_roi(
    ::DMSFrameProtocol::Rect *face_detect_roi) {
  delete face_detect_roi_;
  face_detect_roi_ = face_detect_roi;
  if (face_detect_roi) {
    set_has_face_detect_roi();
  } else {
    clear_has_face_detect_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.AlgoResult.face_detect_ROI)
}

// -------------------------------------------------------------------

// PolicyParams

// optional float r_eye_gradient = 1;
inline bool PolicyParams::has_r_eye_gradient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyParams::set_has_r_eye_gradient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PolicyParams::clear_has_r_eye_gradient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PolicyParams::clear_r_eye_gradient() {
  r_eye_gradient_ = 0;
  clear_has_r_eye_gradient();
}
inline float PolicyParams::r_eye_gradient() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.r_eye_gradient)
  return r_eye_gradient_;
}
inline void PolicyParams::set_r_eye_gradient(float value) {
  set_has_r_eye_gradient();
  r_eye_gradient_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.r_eye_gradient)
}

// optional float l_eye_gradient = 2;
inline bool PolicyParams::has_l_eye_gradient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyParams::set_has_l_eye_gradient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolicyParams::clear_has_l_eye_gradient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolicyParams::clear_l_eye_gradient() {
  l_eye_gradient_ = 0;
  clear_has_l_eye_gradient();
}
inline float PolicyParams::l_eye_gradient() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.l_eye_gradient)
  return l_eye_gradient_;
}
inline void PolicyParams::set_l_eye_gradient(float value) {
  set_has_l_eye_gradient();
  l_eye_gradient_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.l_eye_gradient)
}

// optional float eye_gradient_thld = 3;
inline bool PolicyParams::has_eye_gradient_thld() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyParams::set_has_eye_gradient_thld() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PolicyParams::clear_has_eye_gradient_thld() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PolicyParams::clear_eye_gradient_thld() {
  eye_gradient_thld_ = 0;
  clear_has_eye_gradient_thld();
}
inline float PolicyParams::eye_gradient_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.eye_gradient_thld)
  return eye_gradient_thld_;
}
inline void PolicyParams::set_eye_gradient_thld(float value) {
  set_has_eye_gradient_thld();
  eye_gradient_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.eye_gradient_thld)
}

// optional float avr_r_eye_close = 4;
inline bool PolicyParams::has_avr_r_eye_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolicyParams::set_has_avr_r_eye_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PolicyParams::clear_has_avr_r_eye_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PolicyParams::clear_avr_r_eye_close() {
  avr_r_eye_close_ = 0;
  clear_has_avr_r_eye_close();
}
inline float PolicyParams::avr_r_eye_close() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_r_eye_close)
  return avr_r_eye_close_;
}
inline void PolicyParams::set_avr_r_eye_close(float value) {
  set_has_avr_r_eye_close();
  avr_r_eye_close_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_r_eye_close)
}

// optional float avr_l_eye_close = 5;
inline bool PolicyParams::has_avr_l_eye_close() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolicyParams::set_has_avr_l_eye_close() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PolicyParams::clear_has_avr_l_eye_close() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PolicyParams::clear_avr_l_eye_close() {
  avr_l_eye_close_ = 0;
  clear_has_avr_l_eye_close();
}
inline float PolicyParams::avr_l_eye_close() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_l_eye_close)
  return avr_l_eye_close_;
}
inline void PolicyParams::set_avr_l_eye_close(float value) {
  set_has_avr_l_eye_close();
  avr_l_eye_close_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_l_eye_close)
}

// optional float avr_eyes_dist = 6;
inline bool PolicyParams::has_avr_eyes_dist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolicyParams::set_has_avr_eyes_dist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PolicyParams::clear_has_avr_eyes_dist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PolicyParams::clear_avr_eyes_dist() {
  avr_eyes_dist_ = 0;
  clear_has_avr_eyes_dist();
}
inline float PolicyParams::avr_eyes_dist() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_eyes_dist)
  return avr_eyes_dist_;
}
inline void PolicyParams::set_avr_eyes_dist(float value) {
  set_has_avr_eyes_dist();
  avr_eyes_dist_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_eyes_dist)
}

// optional float avr_eyes_dist_thld = 7;
inline bool PolicyParams::has_avr_eyes_dist_thld() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolicyParams::set_has_avr_eyes_dist_thld() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PolicyParams::clear_has_avr_eyes_dist_thld() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PolicyParams::clear_avr_eyes_dist_thld() {
  avr_eyes_dist_thld_ = 0;
  clear_has_avr_eyes_dist_thld();
}
inline float PolicyParams::avr_eyes_dist_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_eyes_dist_thld)
  return avr_eyes_dist_thld_;
}
inline void PolicyParams::set_avr_eyes_dist_thld(float value) {
  set_has_avr_eyes_dist_thld();
  avr_eyes_dist_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_eyes_dist_thld)
}

// optional .DMSFrameProtocol.Point avr_l_eye_point = 8;
inline bool PolicyParams::has_avr_l_eye_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolicyParams::set_has_avr_l_eye_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PolicyParams::clear_has_avr_l_eye_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PolicyParams::clear_avr_l_eye_point() {
  if (avr_l_eye_point_ != NULL)
    avr_l_eye_point_->::DMSFrameProtocol::Point::Clear();
  clear_has_avr_l_eye_point();
}
inline const ::DMSFrameProtocol::Point &PolicyParams::avr_l_eye_point() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_l_eye_point)
  return avr_l_eye_point_ != NULL ? *avr_l_eye_point_
                                  : *default_instance_->avr_l_eye_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::mutable_avr_l_eye_point() {
  set_has_avr_l_eye_point();
  if (avr_l_eye_point_ == NULL)
    avr_l_eye_point_ = new ::DMSFrameProtocol::Point;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.PolicyParams.avr_l_eye_point)
  return avr_l_eye_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::release_avr_l_eye_point() {
  clear_has_avr_l_eye_point();
  ::DMSFrameProtocol::Point *temp = avr_l_eye_point_;
  avr_l_eye_point_ = NULL;
  return temp;
}
inline void PolicyParams::set_allocated_avr_l_eye_point(
    ::DMSFrameProtocol::Point *avr_l_eye_point) {
  delete avr_l_eye_point_;
  avr_l_eye_point_ = avr_l_eye_point;
  if (avr_l_eye_point) {
    set_has_avr_l_eye_point();
  } else {
    clear_has_avr_l_eye_point();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.PolicyParams.avr_l_eye_point)
}

// optional .DMSFrameProtocol.Point avr_r_eye_point = 9;
inline bool PolicyParams::has_avr_r_eye_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PolicyParams::set_has_avr_r_eye_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PolicyParams::clear_has_avr_r_eye_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PolicyParams::clear_avr_r_eye_point() {
  if (avr_r_eye_point_ != NULL)
    avr_r_eye_point_->::DMSFrameProtocol::Point::Clear();
  clear_has_avr_r_eye_point();
}
inline const ::DMSFrameProtocol::Point &PolicyParams::avr_r_eye_point() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_r_eye_point)
  return avr_r_eye_point_ != NULL ? *avr_r_eye_point_
                                  : *default_instance_->avr_r_eye_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::mutable_avr_r_eye_point() {
  set_has_avr_r_eye_point();
  if (avr_r_eye_point_ == NULL)
    avr_r_eye_point_ = new ::DMSFrameProtocol::Point;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.PolicyParams.avr_r_eye_point)
  return avr_r_eye_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::release_avr_r_eye_point() {
  clear_has_avr_r_eye_point();
  ::DMSFrameProtocol::Point *temp = avr_r_eye_point_;
  avr_r_eye_point_ = NULL;
  return temp;
}
inline void PolicyParams::set_allocated_avr_r_eye_point(
    ::DMSFrameProtocol::Point *avr_r_eye_point) {
  delete avr_r_eye_point_;
  avr_r_eye_point_ = avr_r_eye_point;
  if (avr_r_eye_point) {
    set_has_avr_r_eye_point();
  } else {
    clear_has_avr_r_eye_point();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.PolicyParams.avr_r_eye_point)
}

// optional float avr_nose_leye_dist = 10;
inline bool PolicyParams::has_avr_nose_leye_dist() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PolicyParams::set_has_avr_nose_leye_dist() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PolicyParams::clear_has_avr_nose_leye_dist() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PolicyParams::clear_avr_nose_leye_dist() {
  avr_nose_leye_dist_ = 0;
  clear_has_avr_nose_leye_dist();
}
inline float PolicyParams::avr_nose_leye_dist() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_nose_leye_dist)
  return avr_nose_leye_dist_;
}
inline void PolicyParams::set_avr_nose_leye_dist(float value) {
  set_has_avr_nose_leye_dist();
  avr_nose_leye_dist_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_nose_leye_dist)
}

// optional float avr_nose_reye_dist = 11;
inline bool PolicyParams::has_avr_nose_reye_dist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PolicyParams::set_has_avr_nose_reye_dist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PolicyParams::clear_has_avr_nose_reye_dist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PolicyParams::clear_avr_nose_reye_dist() {
  avr_nose_reye_dist_ = 0;
  clear_has_avr_nose_reye_dist();
}
inline float PolicyParams::avr_nose_reye_dist() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_nose_reye_dist)
  return avr_nose_reye_dist_;
}
inline void PolicyParams::set_avr_nose_reye_dist(float value) {
  set_has_avr_nose_reye_dist();
  avr_nose_reye_dist_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_nose_reye_dist)
}

// optional .DMSFrameProtocol.Point avr_nose_point = 12;
inline bool PolicyParams::has_avr_nose_point() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PolicyParams::set_has_avr_nose_point() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PolicyParams::clear_has_avr_nose_point() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PolicyParams::clear_avr_nose_point() {
  if (avr_nose_point_ != NULL)
    avr_nose_point_->::DMSFrameProtocol::Point::Clear();
  clear_has_avr_nose_point();
}
inline const ::DMSFrameProtocol::Point &PolicyParams::avr_nose_point() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_nose_point)
  return avr_nose_point_ != NULL ? *avr_nose_point_
                                 : *default_instance_->avr_nose_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::mutable_avr_nose_point() {
  set_has_avr_nose_point();
  if (avr_nose_point_ == NULL)
    avr_nose_point_ = new ::DMSFrameProtocol::Point;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.PolicyParams.avr_nose_point)
  return avr_nose_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::release_avr_nose_point() {
  clear_has_avr_nose_point();
  ::DMSFrameProtocol::Point *temp = avr_nose_point_;
  avr_nose_point_ = NULL;
  return temp;
}
inline void PolicyParams::set_allocated_avr_nose_point(
    ::DMSFrameProtocol::Point *avr_nose_point) {
  delete avr_nose_point_;
  avr_nose_point_ = avr_nose_point;
  if (avr_nose_point) {
    set_has_avr_nose_point();
  } else {
    clear_has_avr_nose_point();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.PolicyParams.avr_nose_point)
}

// optional float avr_nose_rl_ratio = 13;
inline bool PolicyParams::has_avr_nose_rl_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PolicyParams::set_has_avr_nose_rl_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PolicyParams::clear_has_avr_nose_rl_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PolicyParams::clear_avr_nose_rl_ratio() {
  avr_nose_rl_ratio_ = 0;
  clear_has_avr_nose_rl_ratio();
}
inline float PolicyParams::avr_nose_rl_ratio() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_nose_rl_ratio)
  return avr_nose_rl_ratio_;
}
inline void PolicyParams::set_avr_nose_rl_ratio(float value) {
  set_has_avr_nose_rl_ratio();
  avr_nose_rl_ratio_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_nose_rl_ratio)
}

// optional float avr_nose_rl_ratio_thld = 14;
inline bool PolicyParams::has_avr_nose_rl_ratio_thld() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PolicyParams::set_has_avr_nose_rl_ratio_thld() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PolicyParams::clear_has_avr_nose_rl_ratio_thld() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PolicyParams::clear_avr_nose_rl_ratio_thld() {
  avr_nose_rl_ratio_thld_ = 0;
  clear_has_avr_nose_rl_ratio_thld();
}
inline float PolicyParams::avr_nose_rl_ratio_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_nose_rl_ratio_thld)
  return avr_nose_rl_ratio_thld_;
}
inline void PolicyParams::set_avr_nose_rl_ratio_thld(float value) {
  set_has_avr_nose_rl_ratio_thld();
  avr_nose_rl_ratio_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_nose_rl_ratio_thld)
}

// optional .DMSFrameProtocol.Point archor_nose_point = 15;
inline bool PolicyParams::has_archor_nose_point() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PolicyParams::set_has_archor_nose_point() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PolicyParams::clear_has_archor_nose_point() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PolicyParams::clear_archor_nose_point() {
  if (archor_nose_point_ != NULL)
    archor_nose_point_->::DMSFrameProtocol::Point::Clear();
  clear_has_archor_nose_point();
}
inline const ::DMSFrameProtocol::Point &PolicyParams::archor_nose_point()
    const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.archor_nose_point)
  return archor_nose_point_ != NULL ? *archor_nose_point_
                                    : *default_instance_->archor_nose_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::mutable_archor_nose_point() {
  set_has_archor_nose_point();
  if (archor_nose_point_ == NULL)
    archor_nose_point_ = new ::DMSFrameProtocol::Point;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.PolicyParams.archor_nose_point)
  return archor_nose_point_;
}
inline ::DMSFrameProtocol::Point *PolicyParams::release_archor_nose_point() {
  clear_has_archor_nose_point();
  ::DMSFrameProtocol::Point *temp = archor_nose_point_;
  archor_nose_point_ = NULL;
  return temp;
}
inline void PolicyParams::set_allocated_archor_nose_point(
    ::DMSFrameProtocol::Point *archor_nose_point) {
  delete archor_nose_point_;
  archor_nose_point_ = archor_nose_point;
  if (archor_nose_point) {
    set_has_archor_nose_point();
  } else {
    clear_has_archor_nose_point();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.PolicyParams.archor_nose_point)
}

// optional float devi_nose_dist_x = 16;
inline bool PolicyParams::has_devi_nose_dist_x() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PolicyParams::set_has_devi_nose_dist_x() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PolicyParams::clear_has_devi_nose_dist_x() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PolicyParams::clear_devi_nose_dist_x() {
  devi_nose_dist_x_ = 0;
  clear_has_devi_nose_dist_x();
}
inline float PolicyParams::devi_nose_dist_x() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.devi_nose_dist_x)
  return devi_nose_dist_x_;
}
inline void PolicyParams::set_devi_nose_dist_x(float value) {
  set_has_devi_nose_dist_x();
  devi_nose_dist_x_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.devi_nose_dist_x)
}

// optional float devi_nose_dist_y = 17;
inline bool PolicyParams::has_devi_nose_dist_y() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PolicyParams::set_has_devi_nose_dist_y() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PolicyParams::clear_has_devi_nose_dist_y() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PolicyParams::clear_devi_nose_dist_y() {
  devi_nose_dist_y_ = 0;
  clear_has_devi_nose_dist_y();
}
inline float PolicyParams::devi_nose_dist_y() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.devi_nose_dist_y)
  return devi_nose_dist_y_;
}
inline void PolicyParams::set_devi_nose_dist_y(float value) {
  set_has_devi_nose_dist_y();
  devi_nose_dist_y_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.devi_nose_dist_y)
}

// optional float devi_nose_dist_x_thld = 18;
inline bool PolicyParams::has_devi_nose_dist_x_thld() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PolicyParams::set_has_devi_nose_dist_x_thld() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PolicyParams::clear_has_devi_nose_dist_x_thld() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PolicyParams::clear_devi_nose_dist_x_thld() {
  devi_nose_dist_x_thld_ = 0;
  clear_has_devi_nose_dist_x_thld();
}
inline float PolicyParams::devi_nose_dist_x_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.devi_nose_dist_x_thld)
  return devi_nose_dist_x_thld_;
}
inline void PolicyParams::set_devi_nose_dist_x_thld(float value) {
  set_has_devi_nose_dist_x_thld();
  devi_nose_dist_x_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.devi_nose_dist_x_thld)
}

// optional float vari_nose_posi_x = 19;
inline bool PolicyParams::has_vari_nose_posi_x() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PolicyParams::set_has_vari_nose_posi_x() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PolicyParams::clear_has_vari_nose_posi_x() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PolicyParams::clear_vari_nose_posi_x() {
  vari_nose_posi_x_ = 0;
  clear_has_vari_nose_posi_x();
}
inline float PolicyParams::vari_nose_posi_x() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.vari_nose_posi_x)
  return vari_nose_posi_x_;
}
inline void PolicyParams::set_vari_nose_posi_x(float value) {
  set_has_vari_nose_posi_x();
  vari_nose_posi_x_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.vari_nose_posi_x)
}

// optional float vari_nose_posi_y = 20;
inline bool PolicyParams::has_vari_nose_posi_y() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PolicyParams::set_has_vari_nose_posi_y() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PolicyParams::clear_has_vari_nose_posi_y() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PolicyParams::clear_vari_nose_posi_y() {
  vari_nose_posi_y_ = 0;
  clear_has_vari_nose_posi_y();
}
inline float PolicyParams::vari_nose_posi_y() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.vari_nose_posi_y)
  return vari_nose_posi_y_;
}
inline void PolicyParams::set_vari_nose_posi_y(float value) {
  set_has_vari_nose_posi_y();
  vari_nose_posi_y_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.vari_nose_posi_y)
}

// optional float vari_nose_posi_x_thld = 21;
inline bool PolicyParams::has_vari_nose_posi_x_thld() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PolicyParams::set_has_vari_nose_posi_x_thld() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PolicyParams::clear_has_vari_nose_posi_x_thld() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PolicyParams::clear_vari_nose_posi_x_thld() {
  vari_nose_posi_x_thld_ = 0;
  clear_has_vari_nose_posi_x_thld();
}
inline float PolicyParams::vari_nose_posi_x_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.vari_nose_posi_x_thld)
  return vari_nose_posi_x_thld_;
}
inline void PolicyParams::set_vari_nose_posi_x_thld(float value) {
  set_has_vari_nose_posi_x_thld();
  vari_nose_posi_x_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.vari_nose_posi_x_thld)
}

// optional float vari_nose_posi_y_thld = 22;
inline bool PolicyParams::has_vari_nose_posi_y_thld() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PolicyParams::set_has_vari_nose_posi_y_thld() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PolicyParams::clear_has_vari_nose_posi_y_thld() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PolicyParams::clear_vari_nose_posi_y_thld() {
  vari_nose_posi_y_thld_ = 0;
  clear_has_vari_nose_posi_y_thld();
}
inline float PolicyParams::vari_nose_posi_y_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.vari_nose_posi_y_thld)
  return vari_nose_posi_y_thld_;
}
inline void PolicyParams::set_vari_nose_posi_y_thld(float value) {
  set_has_vari_nose_posi_y_thld();
  vari_nose_posi_y_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.vari_nose_posi_y_thld)
}

// optional float devi_nose_dist_y_thld = 23;
inline bool PolicyParams::has_devi_nose_dist_y_thld() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PolicyParams::set_has_devi_nose_dist_y_thld() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PolicyParams::clear_has_devi_nose_dist_y_thld() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PolicyParams::clear_devi_nose_dist_y_thld() {
  devi_nose_dist_y_thld_ = 0;
  clear_has_devi_nose_dist_y_thld();
}
inline float PolicyParams::devi_nose_dist_y_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.devi_nose_dist_y_thld)
  return devi_nose_dist_y_thld_;
}
inline void PolicyParams::set_devi_nose_dist_y_thld(float value) {
  set_has_devi_nose_dist_y_thld();
  devi_nose_dist_y_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.devi_nose_dist_y_thld)
}

// optional float avr_rn_rl_ratio = 24;
inline bool PolicyParams::has_avr_rn_rl_ratio() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PolicyParams::set_has_avr_rn_rl_ratio() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PolicyParams::clear_has_avr_rn_rl_ratio() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PolicyParams::clear_avr_rn_rl_ratio() {
  avr_rn_rl_ratio_ = 0;
  clear_has_avr_rn_rl_ratio();
}
inline float PolicyParams::avr_rn_rl_ratio() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_rn_rl_ratio)
  return avr_rn_rl_ratio_;
}
inline void PolicyParams::set_avr_rn_rl_ratio(float value) {
  set_has_avr_rn_rl_ratio();
  avr_rn_rl_ratio_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_rn_rl_ratio)
}

// optional float avr_ln_rl_ratio = 25;
inline bool PolicyParams::has_avr_ln_rl_ratio() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PolicyParams::set_has_avr_ln_rl_ratio() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PolicyParams::clear_has_avr_ln_rl_ratio() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PolicyParams::clear_avr_ln_rl_ratio() {
  avr_ln_rl_ratio_ = 0;
  clear_has_avr_ln_rl_ratio();
}
inline float PolicyParams::avr_ln_rl_ratio() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.avr_ln_rl_ratio)
  return avr_ln_rl_ratio_;
}
inline void PolicyParams::set_avr_ln_rl_ratio(float value) {
  set_has_avr_ln_rl_ratio();
  avr_ln_rl_ratio_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.avr_ln_rl_ratio)
}

// optional float cur_rn_rl_ratio = 26;
inline bool PolicyParams::has_cur_rn_rl_ratio() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PolicyParams::set_has_cur_rn_rl_ratio() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PolicyParams::clear_has_cur_rn_rl_ratio() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PolicyParams::clear_cur_rn_rl_ratio() {
  cur_rn_rl_ratio_ = 0;
  clear_has_cur_rn_rl_ratio();
}
inline float PolicyParams::cur_rn_rl_ratio() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.cur_rn_rl_ratio)
  return cur_rn_rl_ratio_;
}
inline void PolicyParams::set_cur_rn_rl_ratio(float value) {
  set_has_cur_rn_rl_ratio();
  cur_rn_rl_ratio_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.cur_rn_rl_ratio)
}

// optional float cur_ln_rl_ratio = 27;
inline bool PolicyParams::has_cur_ln_rl_ratio() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PolicyParams::set_has_cur_ln_rl_ratio() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PolicyParams::clear_has_cur_ln_rl_ratio() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PolicyParams::clear_cur_ln_rl_ratio() {
  cur_ln_rl_ratio_ = 0;
  clear_has_cur_ln_rl_ratio();
}
inline float PolicyParams::cur_ln_rl_ratio() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.cur_ln_rl_ratio)
  return cur_ln_rl_ratio_;
}
inline void PolicyParams::set_cur_ln_rl_ratio(float value) {
  set_has_cur_ln_rl_ratio();
  cur_ln_rl_ratio_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.cur_ln_rl_ratio)
}

// optional float cur_nose_rl_ratio = 28;
inline bool PolicyParams::has_cur_nose_rl_ratio() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PolicyParams::set_has_cur_nose_rl_ratio() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PolicyParams::clear_has_cur_nose_rl_ratio() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PolicyParams::clear_cur_nose_rl_ratio() {
  cur_nose_rl_ratio_ = 0;
  clear_has_cur_nose_rl_ratio();
}
inline float PolicyParams::cur_nose_rl_ratio() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.cur_nose_rl_ratio)
  return cur_nose_rl_ratio_;
}
inline void PolicyParams::set_cur_nose_rl_ratio(float value) {
  set_has_cur_nose_rl_ratio();
  cur_nose_rl_ratio_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.cur_nose_rl_ratio)
}

// optional float cur_nose_rl_ratio_side_thld = 29;
inline bool PolicyParams::has_cur_nose_rl_ratio_side_thld() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PolicyParams::set_has_cur_nose_rl_ratio_side_thld() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PolicyParams::clear_has_cur_nose_rl_ratio_side_thld() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PolicyParams::clear_cur_nose_rl_ratio_side_thld() {
  cur_nose_rl_ratio_side_thld_ = 0;
  clear_has_cur_nose_rl_ratio_side_thld();
}
inline float PolicyParams::cur_nose_rl_ratio_side_thld() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.PolicyParams.cur_nose_rl_ratio_side_thld)
  return cur_nose_rl_ratio_side_thld_;
}
inline void PolicyParams::set_cur_nose_rl_ratio_side_thld(float value) {
  set_has_cur_nose_rl_ratio_side_thld();
  cur_nose_rl_ratio_side_thld_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.PolicyParams.cur_nose_rl_ratio_side_thld)
}

// -------------------------------------------------------------------

// MonitorResult

// required .DMSFrameProtocol.WarnState warn_state = 1;
inline bool MonitorResult::has_warn_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonitorResult::set_has_warn_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonitorResult::clear_has_warn_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonitorResult::clear_warn_state() {
  warn_state_ = 0;
  clear_has_warn_state();
}
inline ::DMSFrameProtocol::WarnState MonitorResult::warn_state() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.MonitorResult.warn_state)
  return static_cast< ::DMSFrameProtocol::WarnState>(warn_state_);
}
inline void MonitorResult::set_warn_state(::DMSFrameProtocol::WarnState value) {
  assert(::DMSFrameProtocol::WarnState_IsValid(value));
  set_has_warn_state();
  warn_state_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.MonitorResult.warn_state)
}

// required int64 dur_time = 2;
inline bool MonitorResult::has_dur_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonitorResult::set_has_dur_time() { _has_bits_[0] |= 0x00000002u; }
inline void MonitorResult::clear_has_dur_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonitorResult::clear_dur_time() {
  dur_time_ = GOOGLE_LONGLONG(0);
  clear_has_dur_time();
}
inline ::google::protobuf::int64 MonitorResult::dur_time() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.MonitorResult.dur_time)
  return dur_time_;
}
inline void MonitorResult::set_dur_time(::google::protobuf::int64 value) {
  set_has_dur_time();
  dur_time_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.MonitorResult.dur_time)
}

// optional .DMSFrameProtocol.PolicyParams policy_params = 3;
inline bool MonitorResult::has_policy_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonitorResult::set_has_policy_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonitorResult::clear_has_policy_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonitorResult::clear_policy_params() {
  if (policy_params_ != NULL)
    policy_params_->::DMSFrameProtocol::PolicyParams::Clear();
  clear_has_policy_params();
}
inline const ::DMSFrameProtocol::PolicyParams &MonitorResult::policy_params()
    const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.MonitorResult.policy_params)
  return policy_params_ != NULL ? *policy_params_
                                : *default_instance_->policy_params_;
}
inline ::DMSFrameProtocol::PolicyParams *
MonitorResult::mutable_policy_params() {
  set_has_policy_params();
  if (policy_params_ == NULL)
    policy_params_ = new ::DMSFrameProtocol::PolicyParams;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.MonitorResult.policy_params)
  return policy_params_;
}
inline ::DMSFrameProtocol::PolicyParams *
MonitorResult::release_policy_params() {
  clear_has_policy_params();
  ::DMSFrameProtocol::PolicyParams *temp = policy_params_;
  policy_params_ = NULL;
  return temp;
}
inline void MonitorResult::set_allocated_policy_params(
    ::DMSFrameProtocol::PolicyParams *policy_params) {
  delete policy_params_;
  policy_params_ = policy_params;
  if (policy_params) {
    set_has_policy_params();
  } else {
    clear_has_policy_params();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.MonitorResult.policy_params)
}

// optional .DMSFrameProtocol.FaceDir face_dir = 4;
inline bool MonitorResult::has_face_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonitorResult::set_has_face_dir() { _has_bits_[0] |= 0x00000008u; }
inline void MonitorResult::clear_has_face_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonitorResult::clear_face_dir() {
  face_dir_ = 0;
  clear_has_face_dir();
}
inline ::DMSFrameProtocol::FaceDir MonitorResult::face_dir() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.MonitorResult.face_dir)
  return static_cast< ::DMSFrameProtocol::FaceDir>(face_dir_);
}
inline void MonitorResult::set_face_dir(::DMSFrameProtocol::FaceDir value) {
  assert(::DMSFrameProtocol::FaceDir_IsValid(value));
  set_has_face_dir();
  face_dir_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.MonitorResult.face_dir)
}

// -------------------------------------------------------------------

// FaceRecogResult

// optional int32 persion_id = 1;
inline bool FaceRecogResult::has_persion_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceRecogResult::set_has_persion_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaceRecogResult::clear_has_persion_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaceRecogResult::clear_persion_id() {
  persion_id_ = 0;
  clear_has_persion_id();
}
inline ::google::protobuf::int32 FaceRecogResult::persion_id() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.FaceRecogResult.persion_id)
  return persion_id_;
}
inline void FaceRecogResult::set_persion_id(::google::protobuf::int32 value) {
  set_has_persion_id();
  persion_id_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.FaceRecogResult.persion_id)
}

// optional string persion_name = 2;
inline bool FaceRecogResult::has_persion_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceRecogResult::set_has_persion_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaceRecogResult::clear_has_persion_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaceRecogResult::clear_persion_name() {
  if (persion_name_ !=
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persion_name_->clear();
  }
  clear_has_persion_name();
}
inline const ::std::string &FaceRecogResult::persion_name() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.FaceRecogResult.persion_name)
  return *persion_name_;
}
inline void FaceRecogResult::set_persion_name(const ::std::string &value) {
  set_has_persion_name();
  if (persion_name_ ==
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persion_name_ = new ::std::string;
  }
  persion_name_->assign(value);
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.FaceRecogResult.persion_name)
}
inline void FaceRecogResult::set_persion_name(const char *value) {
  set_has_persion_name();
  if (persion_name_ ==
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persion_name_ = new ::std::string;
  }
  persion_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DMSFrameProtocol.FaceRecogResult.persion_name)
}
inline void FaceRecogResult::set_persion_name(const char *value, size_t size) {
  set_has_persion_name();
  if (persion_name_ ==
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persion_name_ = new ::std::string;
  }
  persion_name_->assign(reinterpret_cast<const char *>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DMSFrameProtocol.FaceRecogResult.persion_name)
}
inline ::std::string *FaceRecogResult::mutable_persion_name() {
  set_has_persion_name();
  if (persion_name_ ==
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    persion_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.FaceRecogResult.persion_name)
  return persion_name_;
}
inline ::std::string *FaceRecogResult::release_persion_name() {
  clear_has_persion_name();
  if (persion_name_ ==
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string *temp = persion_name_;
    persion_name_ = const_cast< ::std::string *>(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaceRecogResult::set_allocated_persion_name(
    ::std::string *persion_name) {
  if (persion_name_ !=
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete persion_name_;
  }
  if (persion_name) {
    set_has_persion_name();
    persion_name_ = persion_name;
  } else {
    clear_has_persion_name();
    persion_name_ = const_cast< ::std::string *>(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.FaceRecogResult.persion_name)
}

// optional int64 persion_timestamp = 3;
inline bool FaceRecogResult::has_persion_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaceRecogResult::set_has_persion_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaceRecogResult::clear_has_persion_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaceRecogResult::clear_persion_timestamp() {
  persion_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_persion_timestamp();
}
inline ::google::protobuf::int64 FaceRecogResult::persion_timestamp() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.FaceRecogResult.persion_timestamp)
  return persion_timestamp_;
}
inline void FaceRecogResult::set_persion_timestamp(
    ::google::protobuf::int64 value) {
  set_has_persion_timestamp();
  persion_timestamp_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.FaceRecogResult.persion_timestamp)
}

// optional int32 persion_frame_id = 4;
inline bool FaceRecogResult::has_persion_frame_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceRecogResult::set_has_persion_frame_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaceRecogResult::clear_has_persion_frame_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaceRecogResult::clear_persion_frame_id() {
  persion_frame_id_ = 0;
  clear_has_persion_frame_id();
}
inline ::google::protobuf::int32 FaceRecogResult::persion_frame_id() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.FaceRecogResult.persion_frame_id)
  return persion_frame_id_;
}
inline void FaceRecogResult::set_persion_frame_id(
    ::google::protobuf::int32 value) {
  set_has_persion_frame_id();
  persion_frame_id_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.FaceRecogResult.persion_frame_id)
}

// optional .DMSFrameProtocol.Rect_i persion_detect_ROI = 5;
inline bool FaceRecogResult::has_persion_detect_roi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaceRecogResult::set_has_persion_detect_roi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaceRecogResult::clear_has_persion_detect_roi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaceRecogResult::clear_persion_detect_roi() {
  if (persion_detect_roi_ != NULL)
    persion_detect_roi_->::DMSFrameProtocol::Rect_i::Clear();
  clear_has_persion_detect_roi();
}
inline const ::DMSFrameProtocol::Rect_i &FaceRecogResult::persion_detect_roi()
    const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.FaceRecogResult.persion_detect_ROI)
  return persion_detect_roi_ != NULL ? *persion_detect_roi_
                                     : *default_instance_->persion_detect_roi_;
}
inline ::DMSFrameProtocol::Rect_i *
FaceRecogResult::mutable_persion_detect_roi() {
  set_has_persion_detect_roi();
  if (persion_detect_roi_ == NULL)
    persion_detect_roi_ = new ::DMSFrameProtocol::Rect_i;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.FaceRecogResult.persion_detect_ROI)
  return persion_detect_roi_;
}
inline ::DMSFrameProtocol::Rect_i *
FaceRecogResult::release_persion_detect_roi() {
  clear_has_persion_detect_roi();
  ::DMSFrameProtocol::Rect_i *temp = persion_detect_roi_;
  persion_detect_roi_ = NULL;
  return temp;
}
inline void FaceRecogResult::set_allocated_persion_detect_roi(
    ::DMSFrameProtocol::Rect_i *persion_detect_roi) {
  delete persion_detect_roi_;
  persion_detect_roi_ = persion_detect_roi;
  if (persion_detect_roi) {
    set_has_persion_detect_roi();
  } else {
    clear_has_persion_detect_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.FaceRecogResult.persion_detect_ROI)
}

// optional .DMSFrameProtocol.Rect_i persion_result_ROI = 6;
inline bool FaceRecogResult::has_persion_result_roi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FaceRecogResult::set_has_persion_result_roi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FaceRecogResult::clear_has_persion_result_roi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FaceRecogResult::clear_persion_result_roi() {
  if (persion_result_roi_ != NULL)
    persion_result_roi_->::DMSFrameProtocol::Rect_i::Clear();
  clear_has_persion_result_roi();
}
inline const ::DMSFrameProtocol::Rect_i &FaceRecogResult::persion_result_roi()
    const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.FaceRecogResult.persion_result_ROI)
  return persion_result_roi_ != NULL ? *persion_result_roi_
                                     : *default_instance_->persion_result_roi_;
}
inline ::DMSFrameProtocol::Rect_i *
FaceRecogResult::mutable_persion_result_roi() {
  set_has_persion_result_roi();
  if (persion_result_roi_ == NULL)
    persion_result_roi_ = new ::DMSFrameProtocol::Rect_i;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.FaceRecogResult.persion_result_ROI)
  return persion_result_roi_;
}
inline ::DMSFrameProtocol::Rect_i *
FaceRecogResult::release_persion_result_roi() {
  clear_has_persion_result_roi();
  ::DMSFrameProtocol::Rect_i *temp = persion_result_roi_;
  persion_result_roi_ = NULL;
  return temp;
}
inline void FaceRecogResult::set_allocated_persion_result_roi(
    ::DMSFrameProtocol::Rect_i *persion_result_roi) {
  delete persion_result_roi_;
  persion_result_roi_ = persion_result_roi;
  if (persion_result_roi) {
    set_has_persion_result_roi();
  } else {
    clear_has_persion_result_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.FaceRecogResult.persion_result_ROI)
}

// -------------------------------------------------------------------

// CANInfo

// optional int32 Angle = 1;
inline bool CANInfo::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CANInfo::set_has_angle() { _has_bits_[0] |= 0x00000001u; }
inline void CANInfo::clear_has_angle() { _has_bits_[0] &= ~0x00000001u; }
inline void CANInfo::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 CANInfo::angle() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.CANInfo.Angle)
  return angle_;
}
inline void CANInfo::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.CANInfo.Angle)
}

// optional int32 Direction = 2;
inline bool CANInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CANInfo::set_has_direction() { _has_bits_[0] |= 0x00000002u; }
inline void CANInfo::clear_has_direction() { _has_bits_[0] &= ~0x00000002u; }
inline void CANInfo::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::google::protobuf::int32 CANInfo::direction() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.CANInfo.Direction)
  return direction_;
}
inline void CANInfo::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.CANInfo.Direction)
}

// optional int32 Gears = 3;
inline bool CANInfo::has_gears() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CANInfo::set_has_gears() { _has_bits_[0] |= 0x00000004u; }
inline void CANInfo::clear_has_gears() { _has_bits_[0] &= ~0x00000004u; }
inline void CANInfo::clear_gears() {
  gears_ = 0;
  clear_has_gears();
}
inline ::google::protobuf::int32 CANInfo::gears() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.CANInfo.Gears)
  return gears_;
}
inline void CANInfo::set_gears(::google::protobuf::int32 value) {
  set_has_gears();
  gears_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.CANInfo.Gears)
}

// optional int32 Speed = 4;
inline bool CANInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CANInfo::set_has_speed() { _has_bits_[0] |= 0x00000008u; }
inline void CANInfo::clear_has_speed() { _has_bits_[0] &= ~0x00000008u; }
inline void CANInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 CANInfo::speed() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.CANInfo.Speed)
  return speed_;
}
inline void CANInfo::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.CANInfo.Speed)
}

// optional int64 timestamp = 5;
inline bool CANInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CANInfo::set_has_timestamp() { _has_bits_[0] |= 0x00000010u; }
inline void CANInfo::clear_has_timestamp() { _has_bits_[0] &= ~0x00000010u; }
inline void CANInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 CANInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.CANInfo.timestamp)
  return timestamp_;
}
inline void CANInfo::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.CANInfo.timestamp)
}

// -------------------------------------------------------------------

// ImageInfo

// required int64 time = 1;
inline bool ImageInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageInfo::set_has_time() { _has_bits_[0] |= 0x00000001u; }
inline void ImageInfo::clear_has_time() { _has_bits_[0] &= ~0x00000001u; }
inline void ImageInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ImageInfo::time() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.ImageInfo.time)
  return time_;
}
inline void ImageInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.ImageInfo.time)
}

// required int32 width = 2;
inline bool ImageInfo::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageInfo::set_has_width() { _has_bits_[0] |= 0x00000002u; }
inline void ImageInfo::clear_has_width() { _has_bits_[0] &= ~0x00000002u; }
inline void ImageInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 ImageInfo::width() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.ImageInfo.width)
  return width_;
}
inline void ImageInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.ImageInfo.width)
}

// required int32 height = 3;
inline bool ImageInfo::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageInfo::set_has_height() { _has_bits_[0] |= 0x00000004u; }
inline void ImageInfo::clear_has_height() { _has_bits_[0] &= ~0x00000004u; }
inline void ImageInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ImageInfo::height() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.ImageInfo.height)
  return height_;
}
inline void ImageInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.ImageInfo.height)
}

// required int32 format = 4;
inline bool ImageInfo::has_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageInfo::set_has_format() { _has_bits_[0] |= 0x00000008u; }
inline void ImageInfo::clear_has_format() { _has_bits_[0] &= ~0x00000008u; }
inline void ImageInfo::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::google::protobuf::int32 ImageInfo::format() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.ImageInfo.format)
  return format_;
}
inline void ImageInfo::set_format(::google::protobuf::int32 value) {
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.ImageInfo.format)
}

// required int32 luma = 5;
inline bool ImageInfo::has_luma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageInfo::set_has_luma() { _has_bits_[0] |= 0x00000010u; }
inline void ImageInfo::clear_has_luma() { _has_bits_[0] &= ~0x00000010u; }
inline void ImageInfo::clear_luma() {
  luma_ = 0;
  clear_has_luma();
}
inline ::google::protobuf::int32 ImageInfo::luma() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.ImageInfo.luma)
  return luma_;
}
inline void ImageInfo::set_luma(::google::protobuf::int32 value) {
  set_has_luma();
  luma_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.ImageInfo.luma)
}

// optional int32 img_id = 6;
inline bool ImageInfo::has_img_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageInfo::set_has_img_id() { _has_bits_[0] |= 0x00000020u; }
inline void ImageInfo::clear_has_img_id() { _has_bits_[0] &= ~0x00000020u; }
inline void ImageInfo::clear_img_id() {
  img_id_ = 0;
  clear_has_img_id();
}
inline ::google::protobuf::int32 ImageInfo::img_id() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.ImageInfo.img_id)
  return img_id_;
}
inline void ImageInfo::set_img_id(::google::protobuf::int32 value) {
  set_has_img_id();
  img_id_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.ImageInfo.img_id)
}

// -------------------------------------------------------------------

// DMSFrame

// optional int32 frame_id = 1;
inline bool DMSFrame::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DMSFrame::set_has_frame_id() { _has_bits_[0] |= 0x00000001u; }
inline void DMSFrame::clear_has_frame_id() { _has_bits_[0] &= ~0x00000001u; }
inline void DMSFrame::clear_frame_id() {
  frame_id_ = 0;
  clear_has_frame_id();
}
inline ::google::protobuf::int32 DMSFrame::frame_id() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.frame_id)
  return frame_id_;
}
inline void DMSFrame::set_frame_id(::google::protobuf::int32 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.DMSFrame.frame_id)
}

// optional .DMSFrameProtocol.ImageInfo image = 2;
inline bool DMSFrame::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DMSFrame::set_has_image() { _has_bits_[0] |= 0x00000002u; }
inline void DMSFrame::clear_has_image() { _has_bits_[0] &= ~0x00000002u; }
inline void DMSFrame::clear_image() {
  if (image_ != NULL)
    image_->::DMSFrameProtocol::ImageInfo::Clear();
  clear_has_image();
}
inline const ::DMSFrameProtocol::ImageInfo &DMSFrame::image() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::DMSFrameProtocol::ImageInfo *DMSFrame::mutable_image() {
  set_has_image();
  if (image_ == NULL)
    image_ = new ::DMSFrameProtocol::ImageInfo;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.DMSFrame.image)
  return image_;
}
inline ::DMSFrameProtocol::ImageInfo *DMSFrame::release_image() {
  clear_has_image();
  ::DMSFrameProtocol::ImageInfo *temp = image_;
  image_ = NULL;
  return temp;
}
inline void DMSFrame::set_allocated_image(
    ::DMSFrameProtocol::ImageInfo *image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.DMSFrame.image)
}

// optional .DMSFrameProtocol.AlgoResult algo_result = 3;
inline bool DMSFrame::has_algo_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DMSFrame::set_has_algo_result() { _has_bits_[0] |= 0x00000004u; }
inline void DMSFrame::clear_has_algo_result() { _has_bits_[0] &= ~0x00000004u; }
inline void DMSFrame::clear_algo_result() {
  if (algo_result_ != NULL)
    algo_result_->::DMSFrameProtocol::AlgoResult::Clear();
  clear_has_algo_result();
}
inline const ::DMSFrameProtocol::AlgoResult &DMSFrame::algo_result() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.algo_result)
  return algo_result_ != NULL ? *algo_result_
                              : *default_instance_->algo_result_;
}
inline ::DMSFrameProtocol::AlgoResult *DMSFrame::mutable_algo_result() {
  set_has_algo_result();
  if (algo_result_ == NULL)
    algo_result_ = new ::DMSFrameProtocol::AlgoResult;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.DMSFrame.algo_result)
  return algo_result_;
}
inline ::DMSFrameProtocol::AlgoResult *DMSFrame::release_algo_result() {
  clear_has_algo_result();
  ::DMSFrameProtocol::AlgoResult *temp = algo_result_;
  algo_result_ = NULL;
  return temp;
}
inline void DMSFrame::set_allocated_algo_result(
    ::DMSFrameProtocol::AlgoResult *algo_result) {
  delete algo_result_;
  algo_result_ = algo_result;
  if (algo_result) {
    set_has_algo_result();
  } else {
    clear_has_algo_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.DMSFrame.algo_result)
}

// optional .DMSFrameProtocol.MonitorResult monitor_result = 4;
inline bool DMSFrame::has_monitor_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DMSFrame::set_has_monitor_result() { _has_bits_[0] |= 0x00000008u; }
inline void DMSFrame::clear_has_monitor_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DMSFrame::clear_monitor_result() {
  if (monitor_result_ != NULL)
    monitor_result_->::DMSFrameProtocol::MonitorResult::Clear();
  clear_has_monitor_result();
}
inline const ::DMSFrameProtocol::MonitorResult &DMSFrame::monitor_result()
    const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.monitor_result)
  return monitor_result_ != NULL ? *monitor_result_
                                 : *default_instance_->monitor_result_;
}
inline ::DMSFrameProtocol::MonitorResult *DMSFrame::mutable_monitor_result() {
  set_has_monitor_result();
  if (monitor_result_ == NULL)
    monitor_result_ = new ::DMSFrameProtocol::MonitorResult;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.DMSFrame.monitor_result)
  return monitor_result_;
}
inline ::DMSFrameProtocol::MonitorResult *DMSFrame::release_monitor_result() {
  clear_has_monitor_result();
  ::DMSFrameProtocol::MonitorResult *temp = monitor_result_;
  monitor_result_ = NULL;
  return temp;
}
inline void DMSFrame::set_allocated_monitor_result(
    ::DMSFrameProtocol::MonitorResult *monitor_result) {
  delete monitor_result_;
  monitor_result_ = monitor_result;
  if (monitor_result) {
    set_has_monitor_result();
  } else {
    clear_has_monitor_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.DMSFrame.monitor_result)
}

// repeated .DMSFrameProtocol.CANInfo can_info = 5;
inline int DMSFrame::can_info_size() const { return can_info_.size(); }
inline void DMSFrame::clear_can_info() { can_info_.Clear(); }
inline const ::DMSFrameProtocol::CANInfo &DMSFrame::can_info(int index) const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.can_info)
  return can_info_.Get(index);
}
inline ::DMSFrameProtocol::CANInfo *DMSFrame::mutable_can_info(int index) {
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.DMSFrame.can_info)
  return can_info_.Mutable(index);
}
inline ::DMSFrameProtocol::CANInfo *DMSFrame::add_can_info() {
  // @@protoc_insertion_point(field_add:DMSFrameProtocol.DMSFrame.can_info)
  return can_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::CANInfo>
    &DMSFrame::can_info() const {
  // @@protoc_insertion_point(field_list:DMSFrameProtocol.DMSFrame.can_info)
  return can_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::DMSFrameProtocol::CANInfo>
    *DMSFrame::mutable_can_info() {
  // @@protoc_insertion_point(field_mutable_list:DMSFrameProtocol.DMSFrame.can_info)
  return &can_info_;
}

// optional bool seek_flag = 6 [default = false];
inline bool DMSFrame::has_seek_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DMSFrame::set_has_seek_flag() { _has_bits_[0] |= 0x00000020u; }
inline void DMSFrame::clear_has_seek_flag() { _has_bits_[0] &= ~0x00000020u; }
inline void DMSFrame::clear_seek_flag() {
  seek_flag_ = false;
  clear_has_seek_flag();
}
inline bool DMSFrame::seek_flag() const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.seek_flag)
  return seek_flag_;
}
inline void DMSFrame::set_seek_flag(bool value) {
  set_has_seek_flag();
  seek_flag_ = value;
  // @@protoc_insertion_point(field_set:DMSFrameProtocol.DMSFrame.seek_flag)
}

// optional .DMSFrameProtocol.FaceRecogResult facerecog_result = 7;
inline bool DMSFrame::has_facerecog_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DMSFrame::set_has_facerecog_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DMSFrame::clear_has_facerecog_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DMSFrame::clear_facerecog_result() {
  if (facerecog_result_ != NULL)
    facerecog_result_->::DMSFrameProtocol::FaceRecogResult::Clear();
  clear_has_facerecog_result();
}
inline const ::DMSFrameProtocol::FaceRecogResult &DMSFrame::facerecog_result()
    const {
  // @@protoc_insertion_point(field_get:DMSFrameProtocol.DMSFrame.facerecog_result)
  return facerecog_result_ != NULL ? *facerecog_result_
                                   : *default_instance_->facerecog_result_;
}
inline ::DMSFrameProtocol::FaceRecogResult *
DMSFrame::mutable_facerecog_result() {
  set_has_facerecog_result();
  if (facerecog_result_ == NULL)
    facerecog_result_ = new ::DMSFrameProtocol::FaceRecogResult;
  // @@protoc_insertion_point(field_mutable:DMSFrameProtocol.DMSFrame.facerecog_result)
  return facerecog_result_;
}
inline ::DMSFrameProtocol::FaceRecogResult *
DMSFrame::release_facerecog_result() {
  clear_has_facerecog_result();
  ::DMSFrameProtocol::FaceRecogResult *temp = facerecog_result_;
  facerecog_result_ = NULL;
  return temp;
}
inline void DMSFrame::set_allocated_facerecog_result(
    ::DMSFrameProtocol::FaceRecogResult *facerecog_result) {
  delete facerecog_result_;
  facerecog_result_ = facerecog_result;
  if (facerecog_result) {
    set_has_facerecog_result();
  } else {
    clear_has_facerecog_result();
  }
  // @@protoc_insertion_point(field_set_allocated:DMSFrameProtocol.DMSFrame.facerecog_result)
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace DMSFrameProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
struct is_proto_enum< ::DMSFrameProtocol::WarnState>
    : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor< ::DMSFrameProtocol::WarnState>() {
  return ::DMSFrameProtocol::WarnState_descriptor();
}
template <>
struct is_proto_enum< ::DMSFrameProtocol::FaceDir>
    : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor *GetEnumDescriptor< ::DMSFrameProtocol::FaceDir>() {
  return ::DMSFrameProtocol::FaceDir_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DMSFrame_2eproto__INCLUDED
